
plotter_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007da4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fbc  08007fbc  0000900c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007fbc  08007fbc  00008fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc4  08007fc4  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc4  08007fc4  00008fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fc8  08007fc8  00008fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007fcc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a54  2000000c  08007fd8  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  08007fd8  00009a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6d8  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031cd  00000000  00000000  00023714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  000268e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001106  00000000  00000000  00027ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002860d  00000000  00000000  00028fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a00e  00000000  00000000  000515db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010fd81  00000000  00000000  0006b5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b36a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d38  00000000  00000000  0017b3b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001810e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007f64 	.word	0x08007f64

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007f64 	.word	0x08007f64

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b08c      	sub	sp, #48	@ 0x30
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800054a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f007 fcd5 	bl	8007f0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000562:	4b39      	ldr	r3, [pc, #228]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000564:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000568:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800056a:	4b37      	ldr	r3, [pc, #220]	@ (8000648 <MX_ADC1_Init+0x104>)
 800056c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000570:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000572:	4b35      	ldr	r3, [pc, #212]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000578:	4b33      	ldr	r3, [pc, #204]	@ (8000648 <MX_ADC1_Init+0x104>)
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800057e:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000584:	4b30      	ldr	r3, [pc, #192]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000586:	2201      	movs	r2, #1
 8000588:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <MX_ADC1_Init+0x104>)
 800058c:	2204      	movs	r2, #4
 800058e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000590:	4b2d      	ldr	r3, [pc, #180]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000592:	2200      	movs	r2, #0
 8000594:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000596:	4b2c      	ldr	r3, [pc, #176]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000598:	2201      	movs	r2, #1
 800059a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <MX_ADC1_Init+0x104>)
 800059e:	2202      	movs	r2, #2
 80005a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005a2:	4b29      	ldr	r3, [pc, #164]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005aa:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005b6:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005be:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005cc:	481e      	ldr	r0, [pc, #120]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005ce:	f001 fd25 	bl	800201c <HAL_ADC_Init>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005d8:	f000 fb07 	bl	8000bea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005e4:	4619      	mov	r1, r3
 80005e6:	4818      	ldr	r0, [pc, #96]	@ (8000648 <MX_ADC1_Init+0x104>)
 80005e8:	f002 fd56 	bl	8003098 <HAL_ADCEx_MultiModeConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005f2:	f000 fafa 	bl	8000bea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005f6:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_ADC1_Init+0x108>)
 80005f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005fa:	2306      	movs	r3, #6
 80005fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005fe:	2307      	movs	r3, #7
 8000600:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000602:	237f      	movs	r3, #127	@ 0x7f
 8000604:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000606:	2304      	movs	r3, #4
 8000608:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	480d      	ldr	r0, [pc, #52]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000614:	f001 ffb0 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800061e:	f000 fae4 	bl	8000bea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000622:	4b0b      	ldr	r3, [pc, #44]	@ (8000650 <MX_ADC1_Init+0x10c>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000626:	230c      	movs	r3, #12
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4806      	ldr	r0, [pc, #24]	@ (8000648 <MX_ADC1_Init+0x104>)
 8000630:	f001 ffa2 	bl	8002578 <HAL_ADC_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800063a:	f000 fad6 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	3730      	adds	r7, #48	@ 0x30
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000028 	.word	0x20000028
 800064c:	19200040 	.word	0x19200040
 8000650:	1d500080 	.word	0x1d500080

08000654 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b09e      	sub	sp, #120	@ 0x78
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2254      	movs	r2, #84	@ 0x54
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f007 fc49 	bl	8007f0c <memset>
  if(adcHandle->Instance==ADC1)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000682:	d15e      	bne.n	8000742 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000684:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000688:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800068a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800068e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4618      	mov	r0, r3
 8000696:	f004 fa01 	bl	8004a9c <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006a0:	f000 faa3 	bl	8000bea <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a8:	4a28      	ldr	r2, [pc, #160]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006bc:	4b23      	ldr	r3, [pc, #140]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c0:	4a22      	ldr	r2, [pc, #136]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006c2:	f043 0304 	orr.w	r3, r3, #4
 80006c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c8:	4b20      	ldr	r3, [pc, #128]	@ (800074c <HAL_ADC_MspInit+0xf8>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	f003 0304 	and.w	r3, r3, #4
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006d4:	2303      	movs	r3, #3
 80006d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d8:	2303      	movs	r3, #3
 80006da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80006e4:	4619      	mov	r1, r3
 80006e6:	481a      	ldr	r0, [pc, #104]	@ (8000750 <HAL_ADC_MspInit+0xfc>)
 80006e8:	f003 fa20 	bl	8003b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 80006ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000758 <HAL_ADC_MspInit+0x104>)
 80006f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 80006f4:	2205      	movs	r2, #5
 80006f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f8:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000704:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 8000706:	2280      	movs	r2, #128	@ 0x80
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 800070c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 8000714:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 800071c:	2220      	movs	r2, #32
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000726:	480b      	ldr	r0, [pc, #44]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 8000728:	f002 fece 	bl	80034c8 <HAL_DMA_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000732:	f000 fa5a 	bl	8000bea <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 800073a:	655a      	str	r2, [r3, #84]	@ 0x54
 800073c:	4a05      	ldr	r2, [pc, #20]	@ (8000754 <HAL_ADC_MspInit+0x100>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000742:	bf00      	nop
 8000744:	3778      	adds	r7, #120	@ 0x78
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	48000800 	.word	0x48000800
 8000754:	20000094 	.word	0x20000094
 8000758:	40020008 	.word	0x40020008

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000762:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_DMA_Init+0x90>)
 8000764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000766:	4a21      	ldr	r2, [pc, #132]	@ (80007ec <MX_DMA_Init+0x90>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6493      	str	r3, [r2, #72]	@ 0x48
 800076e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_DMA_Init+0x90>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_DMA_Init+0x90>)
 800077c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800077e:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_DMA_Init+0x90>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6493      	str	r3, [r2, #72]	@ 0x48
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_DMA_Init+0x90>)
 8000788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2100      	movs	r1, #0
 8000796:	200b      	movs	r0, #11
 8000798:	f002 fe61 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800079c:	200b      	movs	r0, #11
 800079e:	f002 fe78 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	200c      	movs	r0, #12
 80007a8:	f002 fe59 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007ac:	200c      	movs	r0, #12
 80007ae:	f002 fe70 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	200d      	movs	r0, #13
 80007b8:	f002 fe51 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80007bc:	200d      	movs	r0, #13
 80007be:	f002 fe68 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200e      	movs	r0, #14
 80007c8:	f002 fe49 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f002 fe60 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	200f      	movs	r0, #15
 80007d8:	f002 fe41 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007dc:	200f      	movs	r0, #15
 80007de:	f002 fe58 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b75      	ldr	r3, [pc, #468]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a74      	ldr	r2, [pc, #464]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b72      	ldr	r3, [pc, #456]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800081e:	4b6f      	ldr	r3, [pc, #444]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a6e      	ldr	r2, [pc, #440]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000824:	f043 0320 	orr.w	r3, r3, #32
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b6c      	ldr	r3, [pc, #432]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0320 	and.w	r3, r3, #32
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b69      	ldr	r3, [pc, #420]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a68      	ldr	r2, [pc, #416]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b66      	ldr	r3, [pc, #408]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b63      	ldr	r3, [pc, #396]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a62      	ldr	r2, [pc, #392]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b60      	ldr	r3, [pc, #384]	@ (80009dc <MX_GPIO_Init+0x1ec>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800086c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000870:	f003 faf6 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800087a:	4859      	ldr	r0, [pc, #356]	@ (80009e0 <MX_GPIO_Init+0x1f0>)
 800087c:	f003 faf0 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	4852      	ldr	r0, [pc, #328]	@ (80009e0 <MX_GPIO_Init+0x1f0>)
 8000898:	f003 f948 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 800089c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f003 f938 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 80008bc:	f241 0301 	movw	r3, #4097	@ 0x1001
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4844      	ldr	r0, [pc, #272]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 80008d4:	f003 f92a 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80008d8:	2306      	movs	r3, #6
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008e0:	2302      	movs	r3, #2
 80008e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4619      	mov	r1, r3
 80008ea:	483e      	ldr	r0, [pc, #248]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 80008ec:	f003 f91e 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4835      	ldr	r0, [pc, #212]	@ (80009e0 <MX_GPIO_Init+0x1f0>)
 800090a:	f003 f90f 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 800090e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000914:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800091a:	2302      	movs	r3, #2
 800091c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	4619      	mov	r1, r3
 8000924:	482e      	ldr	r0, [pc, #184]	@ (80009e0 <MX_GPIO_Init+0x1f0>)
 8000926:	f003 f901 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 800092a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4828      	ldr	r0, [pc, #160]	@ (80009e0 <MX_GPIO_Init+0x1f0>)
 8000940:	f003 f8f4 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8000944:	2310      	movs	r3, #16
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000948:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800094c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4822      	ldr	r0, [pc, #136]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800095a:	f003 f8e7 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800095e:	2340      	movs	r3, #64	@ 0x40
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	2301      	movs	r3, #1
 800096a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4619      	mov	r1, r3
 8000972:	481c      	ldr	r0, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 8000974:	f003 f8da 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000982:	2302      	movs	r3, #2
 8000984:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4815      	ldr	r0, [pc, #84]	@ (80009e4 <MX_GPIO_Init+0x1f4>)
 800098e:	f003 f8cd 	bl	8003b2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2006      	movs	r0, #6
 8000998:	f002 fd61 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099c:	2006      	movs	r0, #6
 800099e:	f002 fd78 	bl	8003492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	200a      	movs	r0, #10
 80009a8:	f002 fd59 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f002 fd70 	bl	8003492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	2017      	movs	r0, #23
 80009b8:	f002 fd51 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009bc:	2017      	movs	r0, #23
 80009be:	f002 fd68 	bl	8003492 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	2028      	movs	r0, #40	@ 0x28
 80009c8:	f002 fd49 	bl	800345e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009cc:	2028      	movs	r0, #40	@ 0x28
 80009ce:	f002 fd60 	bl	8003492 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40021000 	.word	0x40021000
 80009e0:	48000800 	.word	0x48000800
 80009e4:	48000400 	.word	0x48000400

080009e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ec:	f001 f887 	bl	8001afe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009f0:	f000 f8b0 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f4:	f7ff fefc 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f8:	f7ff feb0 	bl	800075c <MX_DMA_Init>
  MX_ADC1_Init();
 80009fc:	f7ff fda2 	bl	8000544 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a00:	f000 fa92 	bl	8000f28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a04:	f000 fade 	bl	8000fc4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a08:	f000 fb32 	bl	8001070 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a0c:	f000 fb86 	bl	800111c <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a10:	f000 fbda 	bl	80011c8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000a14:	f000 fe9c 	bl	8001750 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000a18:	f000 fc94 	bl	8001344 <MX_TIM16_Init>
  MX_TIM1_Init();
 8000a1c:	f000 f9f0 	bl	8000e00 <MX_TIM1_Init>
  MX_LPUART1_UART_Init();
 8000a20:	f000 fe4c 	bl	80016bc <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000a24:	213c      	movs	r1, #60	@ 0x3c
 8000a26:	4839      	ldr	r0, [pc, #228]	@ (8000b0c <main+0x124>)
 8000a28:	f004 fc6a 	bl	8005300 <HAL_TIM_Encoder_Start>
  HAL_ADC_Start_DMA(&hadc1, mx, 40);
 8000a2c:	2228      	movs	r2, #40	@ 0x28
 8000a2e:	4938      	ldr	r1, [pc, #224]	@ (8000b10 <main+0x128>)
 8000a30:	4838      	ldr	r0, [pc, #224]	@ (8000b14 <main+0x12c>)
 8000a32:	f001 fcaf 	bl	8002394 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  QEIReadRawT3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000a36:	4b35      	ldr	r3, [pc, #212]	@ (8000b0c <main+0x124>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a3c:	4a36      	ldr	r2, [pc, #216]	@ (8000b18 <main+0x130>)
 8000a3e:	6013      	str	r3, [r2, #0]
	  QEIReadRawT4 = __HAL_TIM_GET_COUNTER(&htim4);
 8000a40:	4b36      	ldr	r3, [pc, #216]	@ (8000b1c <main+0x134>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a46:	4a36      	ldr	r2, [pc, #216]	@ (8000b20 <main+0x138>)
 8000a48:	6013      	str	r3, [r2, #0]
	  b1 = HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8000a4a:	2180      	movs	r1, #128	@ 0x80
 8000a4c:	4835      	ldr	r0, [pc, #212]	@ (8000b24 <main+0x13c>)
 8000a4e:	f003 f9ef 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000a52:	4603      	mov	r3, r0
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b34      	ldr	r3, [pc, #208]	@ (8000b28 <main+0x140>)
 8000a58:	801a      	strh	r2, [r3, #0]
	  b2 = HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8000a5a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a5e:	4833      	ldr	r0, [pc, #204]	@ (8000b2c <main+0x144>)
 8000a60:	f003 f9e6 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <main+0x148>)
 8000a6a:	801a      	strh	r2, [r3, #0]
	  b3 = HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8000a6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a70:	482e      	ldr	r0, [pc, #184]	@ (8000b2c <main+0x144>)
 8000a72:	f003 f9dd 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b34 <main+0x14c>)
 8000a7c:	801a      	strh	r2, [r3, #0]
	  b4 = HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8000a7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a82:	482a      	ldr	r0, [pc, #168]	@ (8000b2c <main+0x144>)
 8000a84:	f003 f9d4 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b38 <main+0x150>)
 8000a8e:	801a      	strh	r2, [r3, #0]
	  prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8000a90:	2140      	movs	r1, #64	@ 0x40
 8000a92:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <main+0x13c>)
 8000a94:	f003 f9cc 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <main+0x154>)
 8000a9e:	801a      	strh	r2, [r3, #0]
	  lphoto = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8000aa0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa4:	481f      	ldr	r0, [pc, #124]	@ (8000b24 <main+0x13c>)
 8000aa6:	f003 f9c3 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b24      	ldr	r3, [pc, #144]	@ (8000b40 <main+0x158>)
 8000ab0:	801a      	strh	r2, [r3, #0]
	  uphoto = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	481b      	ldr	r0, [pc, #108]	@ (8000b24 <main+0x13c>)
 8000ab6:	f003 f9bb 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b21      	ldr	r3, [pc, #132]	@ (8000b44 <main+0x15c>)
 8000ac0:	801a      	strh	r2, [r3, #0]
	  llim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	4817      	ldr	r0, [pc, #92]	@ (8000b24 <main+0x13c>)
 8000ac6:	f003 f9b3 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	4b1e      	ldr	r3, [pc, #120]	@ (8000b48 <main+0x160>)
 8000ad0:	801a      	strh	r2, [r3, #0]
	  ulim = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_LIM_Pin);
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <main+0x13c>)
 8000ad6:	f003 f9ab 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <main+0x164>)
 8000ae0:	801a      	strh	r2, [r3, #0]
	  emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8000ae2:	2110      	movs	r1, #16
 8000ae4:	480f      	ldr	r0, [pc, #60]	@ (8000b24 <main+0x13c>)
 8000ae6:	f003 f9a3 	bl	8003e30 <HAL_GPIO_ReadPin>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <main+0x168>)
 8000af0:	801a      	strh	r2, [r3, #0]
	  HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, llim);
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <main+0x160>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	461a      	mov	r2, r3
 8000afa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b02:	f003 f9ad 	bl	8003e60 <HAL_GPIO_WritePin>
	  QEIReadRawT3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000b06:	bf00      	nop
 8000b08:	e795      	b.n	8000a36 <main+0x4e>
 8000b0a:	bf00      	nop
 8000b0c:	20000348 	.word	0x20000348
 8000b10:	20000104 	.word	0x20000104
 8000b14:	20000028 	.word	0x20000028
 8000b18:	200000f4 	.word	0x200000f4
 8000b1c:	20000414 	.word	0x20000414
 8000b20:	200000f8 	.word	0x200000f8
 8000b24:	48000400 	.word	0x48000400
 8000b28:	200000fc 	.word	0x200000fc
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	200000fe 	.word	0x200000fe
 8000b34:	20000100 	.word	0x20000100
 8000b38:	20000102 	.word	0x20000102
 8000b3c:	200001a4 	.word	0x200001a4
 8000b40:	200001a6 	.word	0x200001a6
 8000b44:	200001a8 	.word	0x200001a8
 8000b48:	200001aa 	.word	0x200001aa
 8000b4c:	200001ac 	.word	0x200001ac
 8000b50:	200001ae 	.word	0x200001ae

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b094      	sub	sp, #80	@ 0x50
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0318 	add.w	r3, r7, #24
 8000b5e:	2238      	movs	r2, #56	@ 0x38
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f007 f9d2 	bl	8007f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b76:	2000      	movs	r0, #0
 8000b78:	f003 f9ae 	bl	8003ed8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b86:	2340      	movs	r3, #64	@ 0x40
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b92:	2304      	movs	r3, #4
 8000b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b96:	2355      	movs	r3, #85	@ 0x55
 8000b98:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0318 	add.w	r3, r7, #24
 8000baa:	4618      	mov	r0, r3
 8000bac:	f003 fa48 	bl	8004040 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bb6:	f000 f818 	bl	8000bea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f003 fd46 	bl	8004664 <HAL_RCC_ClockConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bde:	f000 f804 	bl	8000bea <Error_Handler>
  }
}
 8000be2:	bf00      	nop
 8000be4:	3750      	adds	r7, #80	@ 0x50
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bee:	b672      	cpsid	i
}
 8000bf0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf2:	bf00      	nop
 8000bf4:	e7fd      	b.n	8000bf2 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c2e:	f003 f9f7 	bl	8004020 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c96:	f000 ff85 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f003 f8f4 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8000cb0:	2010      	movs	r0, #16
 8000cb2:	f003 f8ed 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <DMA1_Channel1_IRQHandler+0x10>)
 8000cc2:	f002 fde4 	bl	800388e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000094 	.word	0x20000094

08000cd0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <DMA1_Channel2_IRQHandler+0x10>)
 8000cd6:	f002 fdda 	bl	800388e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000099c 	.word	0x2000099c

08000ce4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cea:	f002 fdd0 	bl	800388e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200009fc 	.word	0x200009fc

08000cf8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <DMA1_Channel4_IRQHandler+0x10>)
 8000cfe:	f002 fdc6 	bl	800388e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200008dc 	.word	0x200008dc

08000d0c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <DMA1_Channel5_IRQHandler+0x10>)
 8000d12:	f002 fdbc 	bl	800388e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000093c 	.word	0x2000093c

08000d20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8000d24:	2040      	movs	r0, #64	@ 0x40
 8000d26:	f003 f8b3 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8000d2a:	2080      	movs	r0, #128	@ 0x80
 8000d2c:	f003 f8b0 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d38:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000d3a:	f004 fb6f 	bl	800541c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000d3e:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000d40:	f004 fb6c 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001b0 	.word	0x200001b0
 8000d4c:	20000678 	.word	0x20000678

08000d50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d54:	4802      	ldr	r0, [pc, #8]	@ (8000d60 <TIM2_IRQHandler+0x10>)
 8000d56:	f004 fb61 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	2000027c 	.word	0x2000027c

08000d64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d68:	4802      	ldr	r0, [pc, #8]	@ (8000d74 <TIM3_IRQHandler+0x10>)
 8000d6a:	f004 fb57 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000348 	.word	0x20000348

08000d78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d7c:	4802      	ldr	r0, [pc, #8]	@ (8000d88 <TIM4_IRQHandler+0x10>)
 8000d7e:	f004 fb4d 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000414 	.word	0x20000414

08000d8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <USART2_IRQHandler+0x10>)
 8000d92:	f005 fe3b 	bl	8006a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000810 	.word	0x20000810

08000da0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8000da4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000da8:	f003 f872 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8000dac:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000db0:	f003 f86e 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8000db4:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000db8:	f003 f86a 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000dbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000dc0:	f003 f866 	bl	8003e90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000dcc:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <LPUART1_IRQHandler+0x10>)
 8000dce:	f005 fe1d 	bl	8006a0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000744 	.word	0x20000744

08000ddc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b098      	sub	sp, #96	@ 0x60
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e06:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2234      	movs	r2, #52	@ 0x34
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f007 f86d 	bl	8007f0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e34:	4a3b      	ldr	r2, [pc, #236]	@ (8000f24 <MX_TIM1_Init+0x124>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e38:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e44:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e52:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b31      	ldr	r3, [pc, #196]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e5e:	4830      	ldr	r0, [pc, #192]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e60:	f004 f8ce 	bl	8005000 <HAL_TIM_PWM_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e6a:	f7ff febe 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4827      	ldr	r0, [pc, #156]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000e82:	f005 fbe9 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e8c:	f7ff fead 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e90:	2360      	movs	r3, #96	@ 0x60
 8000e92:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000eb6:	f004 fc2b 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ec0:	f7ff fe93 	bl	8000bea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000edc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4807      	ldr	r0, [pc, #28]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000f02:	f005 fc3f 	bl	8006784 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f0c:	f7ff fe6d 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f10:	4803      	ldr	r0, [pc, #12]	@ (8000f20 <MX_TIM1_Init+0x120>)
 8000f12:	f000 fb77 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8000f16:	bf00      	nop
 8000f18:	3760      	adds	r7, #96	@ 0x60
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001b0 	.word	0x200001b0
 8000f24:	40012c00 	.word	0x40012c00

08000f28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f48:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f4c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f50:	22a9      	movs	r2, #169	@ 0xa9
 8000f52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f6e:	4814      	ldr	r0, [pc, #80]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f70:	f003 ffe2 	bl	8004f38 <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f7a:	f7ff fe36 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000f8c:	f004 fcd4 	bl	8005938 <HAL_TIM_ConfigClockSource>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f96:	f7ff fe28 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_TIM2_Init+0x98>)
 8000fa8:	f005 fb56 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000fb2:	f7ff fe1a 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3720      	adds	r7, #32
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000027c 	.word	0x2000027c

08000fc4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	@ 0x30
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	2224      	movs	r2, #36	@ 0x24
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 ff9a 	bl	8007f0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fe2:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8000fe4:	4a21      	ldr	r2, [pc, #132]	@ (800106c <MX_TIM3_Init+0xa8>)
 8000fe6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1e      	ldr	r3, [pc, #120]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8000ff6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ffa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001002:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001008:	2303      	movs	r3, #3
 800100a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	4619      	mov	r1, r3
 8001032:	480d      	ldr	r0, [pc, #52]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8001034:	f004 f8b0 	bl	8005198 <HAL_TIM_Encoder_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800103e:	f7ff fdd4 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800104a:	463b      	mov	r3, r7
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	@ (8001068 <MX_TIM3_Init+0xa4>)
 8001050:	f005 fb02 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800105a:	f7ff fdc6 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3730      	adds	r7, #48	@ 0x30
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000348 	.word	0x20000348
 800106c:	40000400 	.word	0x40000400

08001070 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	@ 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2224      	movs	r2, #36	@ 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f006 ff44 	bl	8007f0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <MX_TIM4_Init+0xa4>)
 8001090:	4a21      	ldr	r2, [pc, #132]	@ (8001118 <MX_TIM4_Init+0xa8>)
 8001092:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001094:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <MX_TIM4_Init+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1e      	ldr	r3, [pc, #120]	@ (8001114 <MX_TIM4_Init+0xa4>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <MX_TIM4_Init+0xa4>)
 80010a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_TIM4_Init+0xa4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_TIM4_Init+0xa4>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b4:	2303      	movs	r3, #3
 80010b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010bc:	2301      	movs	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010cc:	2301      	movs	r3, #1
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_TIM4_Init+0xa4>)
 80010e0:	f004 f85a 	bl	8005198 <HAL_TIM_Encoder_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010ea:	f7ff fd7e 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ee:	2300      	movs	r3, #0
 80010f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	4619      	mov	r1, r3
 80010fa:	4806      	ldr	r0, [pc, #24]	@ (8001114 <MX_TIM4_Init+0xa4>)
 80010fc:	f005 faac 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001106:	f7ff fd70 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	3730      	adds	r7, #48	@ 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000414 	.word	0x20000414
 8001118:	40000800 	.word	0x40000800

0800111c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08c      	sub	sp, #48	@ 0x30
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2224      	movs	r2, #36	@ 0x24
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f006 feee 	bl	8007f0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800113a:	4b21      	ldr	r3, [pc, #132]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 800113c:	4a21      	ldr	r2, [pc, #132]	@ (80011c4 <MX_TIM5_Init+0xa8>)
 800113e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001140:	4b1f      	ldr	r3, [pc, #124]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001146:	4b1e      	ldr	r3, [pc, #120]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800114c:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 800114e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001152:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 8001156:	2200      	movs	r2, #0
 8001158:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001160:	2303      	movs	r3, #3
 8001162:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001174:	2300      	movs	r3, #0
 8001176:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001178:	2301      	movs	r3, #1
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 800118c:	f004 f804 	bl	8005198 <HAL_TIM_Encoder_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001196:	f7ff fd28 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	@ (80011c0 <MX_TIM5_Init+0xa4>)
 80011a8:	f005 fa56 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80011b2:	f7ff fd1a 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	@ 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200004e0 	.word	0x200004e0
 80011c4:	40000c00 	.word	0x40000c00

080011c8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	@ 0x70
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
 80011f8:	615a      	str	r2, [r3, #20]
 80011fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011fc:	1d3b      	adds	r3, r7, #4
 80011fe:	2234      	movs	r2, #52	@ 0x34
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f006 fe82 	bl	8007f0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001208:	4b4c      	ldr	r3, [pc, #304]	@ (800133c <MX_TIM8_Init+0x174>)
 800120a:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <MX_TIM8_Init+0x178>)
 800120c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800120e:	4b4b      	ldr	r3, [pc, #300]	@ (800133c <MX_TIM8_Init+0x174>)
 8001210:	2200      	movs	r2, #0
 8001212:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001214:	4b49      	ldr	r3, [pc, #292]	@ (800133c <MX_TIM8_Init+0x174>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800121a:	4b48      	ldr	r3, [pc, #288]	@ (800133c <MX_TIM8_Init+0x174>)
 800121c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001220:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001222:	4b46      	ldr	r3, [pc, #280]	@ (800133c <MX_TIM8_Init+0x174>)
 8001224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001228:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800122a:	4b44      	ldr	r3, [pc, #272]	@ (800133c <MX_TIM8_Init+0x174>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b42      	ldr	r3, [pc, #264]	@ (800133c <MX_TIM8_Init+0x174>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001236:	4841      	ldr	r0, [pc, #260]	@ (800133c <MX_TIM8_Init+0x174>)
 8001238:	f003 fe7e 	bl	8004f38 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8001242:	f7ff fcd2 	bl	8000bea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001250:	4619      	mov	r1, r3
 8001252:	483a      	ldr	r0, [pc, #232]	@ (800133c <MX_TIM8_Init+0x174>)
 8001254:	f004 fb70 	bl	8005938 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800125e:	f7ff fcc4 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001262:	4836      	ldr	r0, [pc, #216]	@ (800133c <MX_TIM8_Init+0x174>)
 8001264:	f003 fecc 	bl	8005000 <HAL_TIM_PWM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800126e:	f7ff fcbc 	bl	8000bea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800127e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001282:	4619      	mov	r1, r3
 8001284:	482d      	ldr	r0, [pc, #180]	@ (800133c <MX_TIM8_Init+0x174>)
 8001286:	f005 f9e7 	bl	8006658 <HAL_TIMEx_MasterConfigSynchronization>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8001290:	f7ff fcab 	bl	8000bea <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001294:	2360      	movs	r3, #96	@ 0x60
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800129c:	2300      	movs	r3, #0
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012a0:	2300      	movs	r3, #0
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012a4:	2300      	movs	r3, #0
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4820      	ldr	r0, [pc, #128]	@ (800133c <MX_TIM8_Init+0x174>)
 80012ba:	f004 fa29 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80012c4:	f7ff fc91 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012cc:	2204      	movs	r2, #4
 80012ce:	4619      	mov	r1, r3
 80012d0:	481a      	ldr	r0, [pc, #104]	@ (800133c <MX_TIM8_Init+0x174>)
 80012d2:	f004 fa1d 	bl	8005710 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80012dc:	f7ff fc85 	bl	8000bea <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001306:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001310:	2300      	movs	r3, #0
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM8_Init+0x174>)
 800131e:	f005 fa31 	bl	8006784 <HAL_TIMEx_ConfigBreakDeadTime>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8001328:	f7ff fc5f 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800132c:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM8_Init+0x174>)
 800132e:	f000 f969 	bl	8001604 <HAL_TIM_MspPostInit>

}
 8001332:	bf00      	nop
 8001334:	3770      	adds	r7, #112	@ 0x70
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200005ac 	.word	0x200005ac
 8001340:	40013400 	.word	0x40013400

08001344 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001348:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_TIM16_Init+0x58>)
 800134a:	4a15      	ldr	r2, [pc, #84]	@ (80013a0 <MX_TIM16_Init+0x5c>)
 800134c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800134e:	4b13      	ldr	r3, [pc, #76]	@ (800139c <MX_TIM16_Init+0x58>)
 8001350:	22a9      	movs	r2, #169	@ 0xa9
 8001352:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001354:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_TIM16_Init+0x58>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <MX_TIM16_Init+0x58>)
 800135c:	f240 4279 	movw	r2, #1145	@ 0x479
 8001360:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_TIM16_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_TIM16_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_TIM16_Init+0x58>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001374:	4809      	ldr	r0, [pc, #36]	@ (800139c <MX_TIM16_Init+0x58>)
 8001376:	f003 fddf 	bl	8004f38 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001380:	f7ff fc33 	bl	8000bea <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001384:	2108      	movs	r1, #8
 8001386:	4805      	ldr	r0, [pc, #20]	@ (800139c <MX_TIM16_Init+0x58>)
 8001388:	f003 fe9e 	bl	80050c8 <HAL_TIM_OnePulse_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001392:	f7ff fc2a 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000678 	.word	0x20000678
 80013a0:	40014400 	.word	0x40014400

080013a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0d      	ldr	r2, [pc, #52]	@ (80013e8 <HAL_TIM_PWM_MspInit+0x44>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d113      	bne.n	80013de <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	4a0c      	ldr	r2, [pc, #48]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013c2:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_TIM_PWM_MspInit+0x48>)
 80013c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	2019      	movs	r0, #25
 80013d4:	f002 f843 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80013d8:	2019      	movs	r0, #25
 80013da:	f002 f85a 	bl	8003492 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40012c00 	.word	0x40012c00
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001400:	d114      	bne.n	800142c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	4b22      	ldr	r3, [pc, #136]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001406:	4a21      	ldr	r2, [pc, #132]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6593      	str	r3, [r2, #88]	@ 0x58
 800140e:	4b1f      	ldr	r3, [pc, #124]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800141a:	2200      	movs	r2, #0
 800141c:	2100      	movs	r1, #0
 800141e:	201c      	movs	r0, #28
 8001420:	f002 f81d 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001424:	201c      	movs	r0, #28
 8001426:	f002 f834 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800142a:	e02a      	b.n	8001482 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a17      	ldr	r2, [pc, #92]	@ (8001490 <HAL_TIM_Base_MspInit+0xa0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d10c      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 800143c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001440:	6613      	str	r3, [r2, #96]	@ 0x60
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]
}
 800144e:	e018      	b.n	8001482 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0f      	ldr	r2, [pc, #60]	@ (8001494 <HAL_TIM_Base_MspInit+0xa4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d113      	bne.n	8001482 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 800145c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001464:	6613      	str	r3, [r2, #96]	@ 0x60
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <HAL_TIM_Base_MspInit+0x9c>)
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2019      	movs	r0, #25
 8001478:	f001 fff1 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800147c:	2019      	movs	r0, #25
 800147e:	f002 f808 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40013400 	.word	0x40013400
 8001494:	40014400 	.word	0x40014400

08001498 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	@ 0x38
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a4f      	ldr	r2, [pc, #316]	@ (80015f4 <HAL_TIM_Encoder_MspInit+0x15c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d131      	bne.n	800151e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ba:	4b4f      	ldr	r3, [pc, #316]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	4a4e      	ldr	r2, [pc, #312]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c6:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b49      	ldr	r3, [pc, #292]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d6:	4a48      	ldr	r2, [pc, #288]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014de:	4b46      	ldr	r3, [pc, #280]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ea:	23c0      	movs	r3, #192	@ 0xc0
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fa:	2302      	movs	r3, #2
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f002 fb10 	bl	8003b2c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	201d      	movs	r0, #29
 8001512:	f001 ffa4 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001516:	201d      	movs	r0, #29
 8001518:	f001 ffbb 	bl	8003492 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800151c:	e065      	b.n	80015ea <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <HAL_TIM_Encoder_MspInit+0x164>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d132      	bne.n	800158e <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 800152a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800152c:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6593      	str	r3, [r2, #88]	@ 0x58
 8001534:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 8001536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001544:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001558:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	2300      	movs	r3, #0
 8001568:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800156a:	230a      	movs	r3, #10
 800156c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001578:	f002 fad8 	bl	8003b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800157c:	2200      	movs	r2, #0
 800157e:	2100      	movs	r1, #0
 8001580:	201e      	movs	r0, #30
 8001582:	f001 ff6c 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001586:	201e      	movs	r0, #30
 8001588:	f001 ff83 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 800158c:	e02d      	b.n	80015ea <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <HAL_TIM_Encoder_MspInit+0x168>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d128      	bne.n	80015ea <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001598:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	4a16      	ldr	r2, [pc, #88]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <HAL_TIM_Encoder_MspInit+0x160>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c8:	2303      	movs	r3, #3
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80015d8:	2302      	movs	r3, #2
 80015da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e6:	f002 faa1 	bl	8003b2c <HAL_GPIO_Init>
}
 80015ea:	bf00      	nop
 80015ec:	3738      	adds	r7, #56	@ 0x38
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40000400 	.word	0x40000400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40000800 	.word	0x40000800
 8001600:	40000c00 	.word	0x40000c00

08001604 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	@ 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a22      	ldr	r2, [pc, #136]	@ (80016ac <HAL_TIM_MspPostInit+0xa8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d11c      	bne.n	8001660 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 800162c:	f043 0304 	orr.w	r3, r3, #4
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	613b      	str	r3, [r7, #16]
 800163c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800163e:	2308      	movs	r3, #8
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800164e:	2302      	movs	r3, #2
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4816      	ldr	r0, [pc, #88]	@ (80016b4 <HAL_TIM_MspPostInit+0xb0>)
 800165a:	f002 fa67 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800165e:	e020      	b.n	80016a2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <HAL_TIM_MspPostInit+0xb4>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11b      	bne.n	80016a2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166e:	4a10      	ldr	r2, [pc, #64]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001676:	4b0e      	ldr	r3, [pc, #56]	@ (80016b0 <HAL_TIM_MspPostInit+0xac>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001682:	23c0      	movs	r3, #192	@ 0xc0
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001692:	2304      	movs	r3, #4
 8001694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001696:	f107 0314 	add.w	r3, r7, #20
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <HAL_TIM_MspPostInit+0xb0>)
 800169e:	f002 fa45 	bl	8003b2c <HAL_GPIO_Init>
}
 80016a2:	bf00      	nop
 80016a4:	3728      	adds	r7, #40	@ 0x28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	40013400 	.word	0x40013400

080016bc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016c2:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <MX_LPUART1_UART_Init+0x8c>)
 80016c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016c8:	4a20      	ldr	r2, [pc, #128]	@ (800174c <MX_LPUART1_UART_Init+0x90>)
 80016ca:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016e0:	220c      	movs	r2, #12
 80016e2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016fc:	4811      	ldr	r0, [pc, #68]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 80016fe:	f005 f925 	bl	800694c <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001708:	f7ff fa6f 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 8001710:	f006 fb31 	bl	8007d76 <HAL_UARTEx_SetTxFifoThreshold>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800171a:	f7ff fa66 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4808      	ldr	r0, [pc, #32]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 8001722:	f006 fb66 	bl	8007df2 <HAL_UARTEx_SetRxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800172c:	f7ff fa5d 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_LPUART1_UART_Init+0x88>)
 8001732:	f006 fae7 	bl	8007d04 <HAL_UARTEx_DisableFifoMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800173c:	f7ff fa55 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000744 	.word	0x20000744
 8001748:	40008000 	.word	0x40008000
 800174c:	001e8480 	.word	0x001e8480

08001750 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001754:	4b23      	ldr	r3, [pc, #140]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001756:	4a24      	ldr	r2, [pc, #144]	@ (80017e8 <MX_USART2_UART_Init+0x98>)
 8001758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175a:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 800175c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001762:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001764:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001768:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001770:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001772:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b16      	ldr	r3, [pc, #88]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001790:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001796:	4b13      	ldr	r3, [pc, #76]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179c:	4811      	ldr	r0, [pc, #68]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 800179e:	f005 f8d5 	bl	800694c <HAL_UART_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80017a8:	f7ff fa1f 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ac:	2100      	movs	r1, #0
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 80017b0:	f006 fae1 	bl	8007d76 <HAL_UARTEx_SetTxFifoThreshold>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f7ff fa16 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017be:	2100      	movs	r1, #0
 80017c0:	4808      	ldr	r0, [pc, #32]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 80017c2:	f006 fb16 	bl	8007df2 <HAL_UARTEx_SetRxFifoThreshold>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80017cc:	f7ff fa0d 	bl	8000bea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_USART2_UART_Init+0x94>)
 80017d2:	f006 fa97 	bl	8007d04 <HAL_UARTEx_DisableFifoMode>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80017dc:	f7ff fa05 	bl	8000bea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000810 	.word	0x20000810
 80017e8:	40004400 	.word	0x40004400

080017ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0a0      	sub	sp, #128	@ 0x80
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001804:	f107 0318 	add.w	r3, r7, #24
 8001808:	2254      	movs	r2, #84	@ 0x54
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fb7d 	bl	8007f0c <memset>
  if(uartHandle->Instance==LPUART1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a99      	ldr	r2, [pc, #612]	@ (8001a7c <HAL_UART_MspInit+0x290>)
 8001818:	4293      	cmp	r3, r2
 800181a:	f040 8093 	bne.w	8001944 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800181e:	2320      	movs	r3, #32
 8001820:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	4618      	mov	r0, r3
 800182c:	f003 f936 	bl	8004a9c <HAL_RCCEx_PeriphCLKConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001836:	f7ff f9d8 	bl	8000bea <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800183a:	4b91      	ldr	r3, [pc, #580]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 800183c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183e:	4a90      	ldr	r2, [pc, #576]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001846:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001852:	4b8b      	ldr	r3, [pc, #556]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001856:	4a8a      	ldr	r2, [pc, #552]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185e:	4b88      	ldr	r3, [pc, #544]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800186a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800186e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800187c:	2308      	movs	r3, #8
 800187e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001884:	4619      	mov	r1, r3
 8001886:	487f      	ldr	r0, [pc, #508]	@ (8001a84 <HAL_UART_MspInit+0x298>)
 8001888:	f002 f950 	bl	8003b2c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800188c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 800188e:	4a7f      	ldr	r2, [pc, #508]	@ (8001a8c <HAL_UART_MspInit+0x2a0>)
 8001890:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001892:	4b7d      	ldr	r3, [pc, #500]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 8001894:	2222      	movs	r2, #34	@ 0x22
 8001896:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001898:	4b7b      	ldr	r3, [pc, #492]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800189e:	4b7a      	ldr	r3, [pc, #488]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018a4:	4b78      	ldr	r3, [pc, #480]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018a6:	2280      	movs	r2, #128	@ 0x80
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018aa:	4b77      	ldr	r3, [pc, #476]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018b0:	4b75      	ldr	r3, [pc, #468]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80018b6:	4b74      	ldr	r3, [pc, #464]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018bc:	4b72      	ldr	r3, [pc, #456]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80018c2:	4871      	ldr	r0, [pc, #452]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018c4:	f001 fe00 	bl	80034c8 <HAL_DMA_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80018ce:	f7ff f98c 	bl	8000bea <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a6c      	ldr	r2, [pc, #432]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80018da:	4a6b      	ldr	r2, [pc, #428]	@ (8001a88 <HAL_UART_MspInit+0x29c>)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80018e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 80018e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001a94 <HAL_UART_MspInit+0x2a8>)
 80018e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80018e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 80018e8:	2223      	movs	r2, #35	@ 0x23
 80018ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80018ec:	4b68      	ldr	r3, [pc, #416]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 80018ee:	2210      	movs	r2, #16
 80018f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018f2:	4b67      	ldr	r3, [pc, #412]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018f8:	4b65      	ldr	r3, [pc, #404]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 80018fa:	2280      	movs	r2, #128	@ 0x80
 80018fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018fe:	4b64      	ldr	r3, [pc, #400]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 8001900:	2200      	movs	r2, #0
 8001902:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001904:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 8001906:	2200      	movs	r2, #0
 8001908:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800190a:	4b61      	ldr	r3, [pc, #388]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001910:	4b5f      	ldr	r3, [pc, #380]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8001916:	485e      	ldr	r0, [pc, #376]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 8001918:	f001 fdd6 	bl	80034c8 <HAL_DMA_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001922:	f7ff f962 	bl	8000bea <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a59      	ldr	r2, [pc, #356]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 800192a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800192c:	4a58      	ldr	r2, [pc, #352]	@ (8001a90 <HAL_UART_MspInit+0x2a4>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	205b      	movs	r0, #91	@ 0x5b
 8001938:	f001 fd91 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800193c:	205b      	movs	r0, #91	@ 0x5b
 800193e:	f001 fda8 	bl	8003492 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001942:	e097      	b.n	8001a74 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a53      	ldr	r2, [pc, #332]	@ (8001a98 <HAL_UART_MspInit+0x2ac>)
 800194a:	4293      	cmp	r3, r2
 800194c:	f040 8092 	bne.w	8001a74 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001950:	2302      	movs	r3, #2
 8001952:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001954:	2300      	movs	r3, #0
 8001956:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 0318 	add.w	r3, r7, #24
 800195c:	4618      	mov	r0, r3
 800195e:	f003 f89d 	bl	8004a9c <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8001968:	f7ff f93f 	bl	8000bea <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800196c:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	4a43      	ldr	r2, [pc, #268]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001976:	6593      	str	r3, [r2, #88]	@ 0x58
 8001978:	4b41      	ldr	r3, [pc, #260]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b3e      	ldr	r3, [pc, #248]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a3d      	ldr	r2, [pc, #244]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b3b      	ldr	r3, [pc, #236]	@ (8001a80 <HAL_UART_MspInit+0x294>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800199c:	230c      	movs	r3, #12
 800199e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	2302      	movs	r3, #2
 80019a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ac:	2307      	movs	r3, #7
 80019ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b4:	4619      	mov	r1, r3
 80019b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ba:	f002 f8b7 	bl	8003b2c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80019be:	4b37      	ldr	r3, [pc, #220]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019c0:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <HAL_UART_MspInit+0x2b4>)
 80019c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80019c4:	4b35      	ldr	r3, [pc, #212]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019c6:	221a      	movs	r2, #26
 80019c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019d0:	4b32      	ldr	r3, [pc, #200]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d6:	4b31      	ldr	r3, [pc, #196]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019d8:	2280      	movs	r2, #128	@ 0x80
 80019da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019dc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019e2:	4b2e      	ldr	r3, [pc, #184]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019e8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ee:	4b2b      	ldr	r3, [pc, #172]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80019f4:	4829      	ldr	r0, [pc, #164]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 80019f6:	f001 fd67 	bl	80034c8 <HAL_DMA_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8001a00:	f7ff f8f3 	bl	8000bea <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a25      	ldr	r2, [pc, #148]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 8001a08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001a0c:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <HAL_UART_MspInit+0x2b0>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a14:	4a24      	ldr	r2, [pc, #144]	@ (8001aa8 <HAL_UART_MspInit+0x2bc>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001a18:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a1a:	221b      	movs	r2, #27
 8001a1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a1e:	4b21      	ldr	r3, [pc, #132]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a20:	2210      	movs	r2, #16
 8001a22:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a2c:	2280      	movs	r2, #128	@ 0x80
 8001a2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a42:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a48:	4816      	ldr	r0, [pc, #88]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a4a:	f001 fd3d 	bl	80034c8 <HAL_DMA_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8001a54:	f7ff f8c9 	bl	8000bea <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a12      	ldr	r2, [pc, #72]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001a5e:	4a11      	ldr	r2, [pc, #68]	@ (8001aa4 <HAL_UART_MspInit+0x2b8>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2026      	movs	r0, #38	@ 0x26
 8001a6a:	f001 fcf8 	bl	800345e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a6e:	2026      	movs	r0, #38	@ 0x26
 8001a70:	f001 fd0f 	bl	8003492 <HAL_NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3780      	adds	r7, #128	@ 0x80
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40008000 	.word	0x40008000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	200008dc 	.word	0x200008dc
 8001a8c:	40020044 	.word	0x40020044
 8001a90:	2000093c 	.word	0x2000093c
 8001a94:	40020058 	.word	0x40020058
 8001a98:	40004400 	.word	0x40004400
 8001a9c:	2000099c 	.word	0x2000099c
 8001aa0:	4002001c 	.word	0x4002001c
 8001aa4:	200009fc 	.word	0x200009fc
 8001aa8:	40020030 	.word	0x40020030

08001aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001aac:	480d      	ldr	r0, [pc, #52]	@ (8001ae4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001aae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab0:	f7ff f994 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480c      	ldr	r0, [pc, #48]	@ (8001ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ab6:	490d      	ldr	r1, [pc, #52]	@ (8001aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8001af0 <LoopForever+0xe>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001acc:	4c0a      	ldr	r4, [pc, #40]	@ (8001af8 <LoopForever+0x16>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f006 fa1f 	bl	8007f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ade:	f7fe ff83 	bl	80009e8 <main>

08001ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ae2:	e7fe      	b.n	8001ae2 <LoopForever>
  ldr   r0, =_estack
 8001ae4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001af0:	08007fcc 	.word	0x08007fcc
  ldr r2, =_sbss
 8001af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001af8:	20000a60 	.word	0x20000a60

08001afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC1_2_IRQHandler>

08001afe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b08:	2003      	movs	r0, #3
 8001b0a:	f001 fc9d 	bl	8003448 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f000 f80e 	bl	8001b30 <HAL_InitTick>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	e001      	b.n	8001b24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b20:	f7ff f86a 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b24:	79fb      	ldrb	r3, [r7, #7]

}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
	...

08001b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b3c:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_InitTick+0x68>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d022      	beq.n	8001b8a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b44:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_InitTick+0x6c>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4b13      	ldr	r3, [pc, #76]	@ (8001b98 <HAL_InitTick+0x68>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b50:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fca8 	bl	80034ae <HAL_SYSTICK_Config>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10f      	bne.n	8001b84 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b0f      	cmp	r3, #15
 8001b68:	d809      	bhi.n	8001b7e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b72:	f001 fc74 	bl	800345e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <HAL_InitTick+0x70>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e007      	b.n	8001b8e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e004      	b.n	8001b8e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
 8001b88:	e001      	b.n	8001b8e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000008 	.word	0x20000008
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	@ (8001bc0 <HAL_IncTick+0x1c>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <HAL_IncTick+0x20>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a03      	ldr	r2, [pc, #12]	@ (8001bc0 <HAL_IncTick+0x1c>)
 8001bb4:	6013      	str	r3, [r2, #0]
}
 8001bb6:	bf00      	nop
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20000a5c 	.word	0x20000a5c
 8001bc4:	20000008 	.word	0x20000008

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	@ (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000a5c 	.word	0x20000a5c

08001be0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	609a      	str	r2, [r3, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3360      	adds	r3, #96	@ 0x60
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <LL_ADC_SetOffset+0x44>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	03fff000 	.word	0x03fff000

08001c90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3360      	adds	r3, #96	@ 0x60
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3360      	adds	r3, #96	@ 0x60
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ce6:	bf00      	nop
 8001ce8:	371c      	adds	r7, #28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b087      	sub	sp, #28
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	60b9      	str	r1, [r7, #8]
 8001cfc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3360      	adds	r3, #96	@ 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	431a      	orrs	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3360      	adds	r3, #96	@ 0x60
 8001d38:	461a      	mov	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001d52:	bf00      	nop
 8001d54:	371c      	adds	r7, #28
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	615a      	str	r2, [r3, #20]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b087      	sub	sp, #28
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3330      	adds	r3, #48	@ 0x30
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	211f      	movs	r1, #31
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 011f 	and.w	r1, r3, #31
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	f003 031f 	and.w	r3, r3, #31
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	431a      	orrs	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001df6:	bf00      	nop
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b087      	sub	sp, #28
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	60f8      	str	r0, [r7, #12]
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	3314      	adds	r3, #20
 8001e12:	461a      	mov	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0e5b      	lsrs	r3, r3, #25
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0d1b      	lsrs	r3, r3, #20
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2107      	movs	r1, #7
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	0d1b      	lsrs	r3, r3, #20
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	6879      	ldr	r1, [r7, #4]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	431a      	orrs	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0318 	and.w	r3, r3, #24
 8001e7a:	4908      	ldr	r1, [pc, #32]	@ (8001e9c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001e7c:	40d9      	lsrs	r1, r3
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	400b      	ands	r3, r1
 8001e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001e8e:	bf00      	nop
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	0007ffff 	.word	0x0007ffff

08001ea0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 031f 	and.w	r3, r3, #31
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6093      	str	r3, [r2, #8]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001ef4:	d101      	bne.n	8001efa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f44:	d101      	bne.n	8001f4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <LL_ADC_IsEnabled+0x18>
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <LL_ADC_IsEnabled+0x1a>
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fb6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fba:	f043 0204 	orr.w	r2, r3, #4
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b08      	cmp	r3, #8
 8002006:	d101      	bne.n	800200c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b089      	sub	sp, #36	@ 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e1a9      	b.n	800238a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fb05 	bl	8000654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff3f 	bl	8001ee0 <LL_ADC_IsDeepPowerDownEnabled>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff ff25 	bl	8001ebc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff5a 	bl	8001f30 <LL_ADC_IsInternalRegulatorEnabled>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d115      	bne.n	80020ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff3e 	bl	8001f08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800208c:	4b9c      	ldr	r3, [pc, #624]	@ (8002300 <HAL_ADC_Init+0x2e4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	4a9c      	ldr	r2, [pc, #624]	@ (8002304 <HAL_ADC_Init+0x2e8>)
 8002094:	fba2 2303 	umull	r2, r3, r2, r3
 8002098:	099b      	lsrs	r3, r3, #6
 800209a:	3301      	adds	r3, #1
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a0:	e002      	b.n	80020a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f9      	bne.n	80020a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff3c 	bl	8001f30 <LL_ADC_IsInternalRegulatorEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10d      	bne.n	80020da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c2:	f043 0210 	orr.w	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f043 0201 	orr.w	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff ff75 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 80020e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8142 	bne.w	8002378 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 813e 	bne.w	8002378 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002100:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002104:	f043 0202 	orr.w	r2, r3, #2
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff35 	bl	8001f80 <LL_ADC_IsEnabled>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d141      	bne.n	80021a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002124:	d004      	beq.n	8002130 <HAL_ADC_Init+0x114>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a77      	ldr	r2, [pc, #476]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d10f      	bne.n	8002150 <HAL_ADC_Init+0x134>
 8002130:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002134:	f7ff ff24 	bl	8001f80 <LL_ADC_IsEnabled>
 8002138:	4604      	mov	r4, r0
 800213a:	4873      	ldr	r0, [pc, #460]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800213c:	f7ff ff20 	bl	8001f80 <LL_ADC_IsEnabled>
 8002140:	4603      	mov	r3, r0
 8002142:	4323      	orrs	r3, r4
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e012      	b.n	8002176 <HAL_ADC_Init+0x15a>
 8002150:	486e      	ldr	r0, [pc, #440]	@ (800230c <HAL_ADC_Init+0x2f0>)
 8002152:	f7ff ff15 	bl	8001f80 <LL_ADC_IsEnabled>
 8002156:	4604      	mov	r4, r0
 8002158:	486d      	ldr	r0, [pc, #436]	@ (8002310 <HAL_ADC_Init+0x2f4>)
 800215a:	f7ff ff11 	bl	8001f80 <LL_ADC_IsEnabled>
 800215e:	4603      	mov	r3, r0
 8002160:	431c      	orrs	r4, r3
 8002162:	486c      	ldr	r0, [pc, #432]	@ (8002314 <HAL_ADC_Init+0x2f8>)
 8002164:	f7ff ff0c 	bl	8001f80 <LL_ADC_IsEnabled>
 8002168:	4603      	mov	r3, r0
 800216a:	4323      	orrs	r3, r4
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d012      	beq.n	80021a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002182:	d004      	beq.n	800218e <HAL_ADC_Init+0x172>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5f      	ldr	r2, [pc, #380]	@ (8002308 <HAL_ADC_Init+0x2ec>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d101      	bne.n	8002192 <HAL_ADC_Init+0x176>
 800218e:	4a62      	ldr	r2, [pc, #392]	@ (8002318 <HAL_ADC_Init+0x2fc>)
 8002190:	e000      	b.n	8002194 <HAL_ADC_Init+0x178>
 8002192:	4a62      	ldr	r2, [pc, #392]	@ (800231c <HAL_ADC_Init+0x300>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4619      	mov	r1, r3
 800219a:	4610      	mov	r0, r2
 800219c:	f7ff fd20 	bl	8001be0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7f5b      	ldrb	r3, [r3, #29]
 80021a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80021b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80021b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d106      	bne.n	80021dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d2:	3b01      	subs	r3, #1
 80021d4:	045b      	lsls	r3, r3, #17
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d009      	beq.n	80021f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b48      	ldr	r3, [pc, #288]	@ (8002320 <HAL_ADC_Init+0x304>)
 8002200:	4013      	ands	r3, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	69b9      	ldr	r1, [r7, #24]
 8002208:	430b      	orrs	r3, r1
 800220a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fee4 	bl	8001ff4 <LL_ADC_INJ_IsConversionOngoing>
 800222c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d17f      	bne.n	8002334 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d17c      	bne.n	8002334 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800223e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002246:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002256:	f023 0302 	bic.w	r3, r3, #2
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	69b9      	ldr	r1, [r7, #24]
 8002260:	430b      	orrs	r3, r1
 8002262:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d017      	beq.n	800229c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	691a      	ldr	r2, [r3, #16]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800227a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002284:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002288:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6911      	ldr	r1, [r2, #16]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800229a:	e013      	b.n	80022c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691a      	ldr	r2, [r3, #16]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80022aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d12a      	bne.n	8002324 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022e4:	4311      	orrs	r1, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80022f0:	430a      	orrs	r2, r1
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	611a      	str	r2, [r3, #16]
 80022fe:	e019      	b.n	8002334 <HAL_ADC_Init+0x318>
 8002300:	20000000 	.word	0x20000000
 8002304:	053e2d63 	.word	0x053e2d63
 8002308:	50000100 	.word	0x50000100
 800230c:	50000400 	.word	0x50000400
 8002310:	50000500 	.word	0x50000500
 8002314:	50000600 	.word	0x50000600
 8002318:	50000300 	.word	0x50000300
 800231c:	50000700 	.word	0x50000700
 8002320:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691a      	ldr	r2, [r3, #16]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0201 	bic.w	r2, r2, #1
 8002332:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10c      	bne.n	8002356 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f023 010f 	bic.w	r1, r3, #15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	1e5a      	subs	r2, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	631a      	str	r2, [r3, #48]	@ 0x30
 8002354:	e007      	b.n	8002366 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 020f 	bic.w	r2, r2, #15
 8002364:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002376:	e007      	b.n	8002388 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237c:	f043 0210 	orr.w	r2, r3, #16
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002388:	7ffb      	ldrb	r3, [r7, #31]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	@ 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	bf00      	nop

08002394 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023a8:	d004      	beq.n	80023b4 <HAL_ADC_Start_DMA+0x20>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5a      	ldr	r2, [pc, #360]	@ (8002518 <HAL_ADC_Start_DMA+0x184>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_ADC_Start_DMA+0x24>
 80023b4:	4b59      	ldr	r3, [pc, #356]	@ (800251c <HAL_ADC_Start_DMA+0x188>)
 80023b6:	e000      	b.n	80023ba <HAL_ADC_Start_DMA+0x26>
 80023b8:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_ADC_Start_DMA+0x18c>)
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fd70 	bl	8001ea0 <LL_ADC_GetMultimode>
 80023c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fe01 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f040 809b 	bne.w	800250a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_Start_DMA+0x4e>
 80023de:	2302      	movs	r3, #2
 80023e0:	e096      	b.n	8002510 <HAL_ADC_Start_DMA+0x17c>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_ADC_Start_DMA+0x190>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d008      	beq.n	8002406 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d002      	beq.n	8002406 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	2b09      	cmp	r3, #9
 8002404:	d17a      	bne.n	80024fc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fcf6 	bl	8002df8 <ADC_Enable>
 800240c:	4603      	mov	r3, r0
 800240e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d16d      	bne.n	80024f2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800241a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a3a      	ldr	r2, [pc, #232]	@ (8002518 <HAL_ADC_Start_DMA+0x184>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_ADC_Start_DMA+0xb4>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3b      	ldr	r2, [pc, #236]	@ (8002528 <HAL_ADC_Start_DMA+0x194>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d002      	beq.n	8002444 <HAL_ADC_Start_DMA+0xb0>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e003      	b.n	800244c <HAL_ADC_Start_DMA+0xb8>
 8002444:	4b39      	ldr	r3, [pc, #228]	@ (800252c <HAL_ADC_Start_DMA+0x198>)
 8002446:	e001      	b.n	800244c <HAL_ADC_Start_DMA+0xb8>
 8002448:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	4293      	cmp	r3, r2
 8002452:	d002      	beq.n	800245a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800246a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	f023 0206 	bic.w	r2, r3, #6
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	661a      	str	r2, [r3, #96]	@ 0x60
 800247e:	e002      	b.n	8002486 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800248a:	4a29      	ldr	r2, [pc, #164]	@ (8002530 <HAL_ADC_Start_DMA+0x19c>)
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	4a28      	ldr	r2, [pc, #160]	@ (8002534 <HAL_ADC_Start_DMA+0x1a0>)
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249a:	4a27      	ldr	r2, [pc, #156]	@ (8002538 <HAL_ADC_Start_DMA+0x1a4>)
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	221c      	movs	r2, #28
 80024a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0210 	orr.w	r2, r2, #16
 80024bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3340      	adds	r3, #64	@ 0x40
 80024d8:	4619      	mov	r1, r3
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f001 f89b 	bl	8003618 <HAL_DMA_Start_IT>
 80024e2:	4603      	mov	r3, r0
 80024e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd5b 	bl	8001fa6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80024f0:	e00d      	b.n	800250e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80024fa:	e008      	b.n	800250e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002508:	e001      	b.n	800250e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800250a:	2302      	movs	r3, #2
 800250c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800250e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	50000100 	.word	0x50000100
 800251c:	50000300 	.word	0x50000300
 8002520:	50000700 	.word	0x50000700
 8002524:	50000600 	.word	0x50000600
 8002528:	50000500 	.word	0x50000500
 800252c:	50000400 	.word	0x50000400
 8002530:	08002f25 	.word	0x08002f25
 8002534:	08002ffd 	.word	0x08002ffd
 8002538:	08003019 	.word	0x08003019

0800253c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0b6      	sub	sp, #216	@ 0xd8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_ADC_ConfigChannel+0x24>
 8002596:	2302      	movs	r3, #2
 8002598:	f000 bc13 	b.w	8002dc2 <HAL_ADC_ConfigChannel+0x84a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fd10 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f040 83f3 	bne.w	8002d9c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f7ff fbf1 	bl	8001daa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fcfe 	bl	8001fce <LL_ADC_REG_IsConversionOngoing>
 80025d2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff fd0a 	bl	8001ff4 <LL_ADC_INJ_IsConversionOngoing>
 80025e0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 81d9 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f040 81d4 	bne.w	80029a0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002600:	d10f      	bne.n	8002622 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6818      	ldr	r0, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2200      	movs	r2, #0
 800260c:	4619      	mov	r1, r3
 800260e:	f7ff fbf8 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fb9f 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>
 8002620:	e00e      	b.n	8002640 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff fbe7 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2100      	movs	r1, #0
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fb8f 	bl	8001d5e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	08db      	lsrs	r3, r3, #3
 800264c:	f003 0303 	and.w	r3, r3, #3
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d022      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	6919      	ldr	r1, [r3, #16]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002672:	f7ff fae9 	bl	8001c48 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6919      	ldr	r1, [r3, #16]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	461a      	mov	r2, r3
 8002684:	f7ff fb35 	bl	8001cf2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_ADC_ConfigChannel+0x126>
 8002698:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800269c:	e000      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x128>
 800269e:	2300      	movs	r3, #0
 80026a0:	461a      	mov	r2, r3
 80026a2:	f7ff fb41 	bl	8001d28 <LL_ADC_SetOffsetSaturation>
 80026a6:	e17b      	b.n	80029a0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff faee 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x15c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fae3 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80026ca:	4603      	mov	r3, r0
 80026cc:	0e9b      	lsrs	r3, r3, #26
 80026ce:	f003 021f 	and.w	r2, r3, #31
 80026d2:	e01e      	b.n	8002712 <HAL_ADC_ConfigChannel+0x19a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2100      	movs	r1, #0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff fad8 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80026ea:	fa93 f3a3 	rbit	r3, r3
 80026ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002702:	2320      	movs	r3, #32
 8002704:	e004      	b.n	8002710 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800270a:	fab3 f383 	clz	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_ADC_ConfigChannel+0x1b2>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	0e9b      	lsrs	r3, r3, #26
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	e018      	b.n	800275c <HAL_ADC_ConfigChannel+0x1e4>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800273e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002742:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e004      	b.n	800275c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002756:	fab3 f383 	clz	r3, r3
 800275a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff faa7 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2101      	movs	r1, #1
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff fa8b 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x222>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fa80 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002790:	4603      	mov	r3, r0
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	f003 021f 	and.w	r2, r3, #31
 8002798:	e01e      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x260>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2101      	movs	r1, #1
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fa75 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80027b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80027c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e004      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80027d0:	fab3 f383 	clz	r3, r3
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d105      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x278>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	0e9b      	lsrs	r3, r3, #26
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	e018      	b.n	8002822 <HAL_ADC_ConfigChannel+0x2aa>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002804:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002808:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800280c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e004      	b.n	8002822 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800281c:	fab3 f383 	clz	r3, r3
 8002820:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002822:	429a      	cmp	r2, r3
 8002824:	d106      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2200      	movs	r2, #0
 800282c:	2101      	movs	r1, #1
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa44 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2102      	movs	r1, #2
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff fa28 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002840:	4603      	mov	r3, r0
 8002842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x2e8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2102      	movs	r1, #2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fa1d 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002856:	4603      	mov	r3, r0
 8002858:	0e9b      	lsrs	r3, r3, #26
 800285a:	f003 021f 	and.w	r2, r3, #31
 800285e:	e01e      	b.n	800289e <HAL_ADC_ConfigChannel+0x326>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2102      	movs	r1, #2
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fa12 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002876:	fa93 f3a3 	rbit	r3, r3
 800287a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800287e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800288e:	2320      	movs	r3, #32
 8002890:	e004      	b.n	800289c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002892:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x33e>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0e9b      	lsrs	r3, r3, #26
 80028b0:	f003 031f 	and.w	r3, r3, #31
 80028b4:	e016      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x36c>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80028c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80028ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028d6:	2320      	movs	r3, #32
 80028d8:	e004      	b.n	80028e4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028de:	fab3 f383 	clz	r3, r3
 80028e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d106      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff f9e3 	bl	8001cbc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2103      	movs	r1, #3
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff f9c7 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002902:	4603      	mov	r3, r0
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x3aa>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f9bc 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	0e9b      	lsrs	r3, r3, #26
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	e017      	b.n	8002952 <HAL_ADC_ConfigChannel+0x3da>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2103      	movs	r1, #3
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff f9b1 	bl	8001c90 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002934:	fa93 f3a3 	rbit	r3, r3
 8002938:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800293a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800293e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002944:	2320      	movs	r3, #32
 8002946:	e003      	b.n	8002950 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d105      	bne.n	800296a <HAL_ADC_ConfigChannel+0x3f2>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	e011      	b.n	800298e <HAL_ADC_ConfigChannel+0x416>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800297a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800297c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002982:	2320      	movs	r3, #32
 8002984:	e003      	b.n	800298e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800298e:	429a      	cmp	r2, r3
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2200      	movs	r2, #0
 8002998:	2103      	movs	r1, #3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff f98e 	bl	8001cbc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff faeb 	bl	8001f80 <LL_ADC_IsEnabled>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 813d 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6818      	ldr	r0, [r3, #0]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	6819      	ldr	r1, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	461a      	mov	r2, r3
 80029c0:	f7ff fa4a 	bl	8001e58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4aa2      	ldr	r2, [pc, #648]	@ (8002c54 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 812e 	bne.w	8002c2c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10b      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x480>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 031f 	and.w	r3, r3, #31
 80029ec:	2b09      	cmp	r3, #9
 80029ee:	bf94      	ite	ls
 80029f0:	2301      	movls	r3, #1
 80029f2:	2300      	movhi	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	e019      	b.n	8002a2c <HAL_ADC_ConfigChannel+0x4b4>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a00:	fa93 f3a3 	rbit	r3, r3
 8002a04:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002a06:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002a0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e003      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2b09      	cmp	r3, #9
 8002a24:	bf94      	ite	ls
 8002a26:	2301      	movls	r3, #1
 8002a28:	2300      	movhi	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d079      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x4d4>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	0e9b      	lsrs	r3, r3, #26
 8002a42:	3301      	adds	r3, #1
 8002a44:	069b      	lsls	r3, r3, #26
 8002a46:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a4a:	e015      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x500>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a54:	fa93 f3a3 	rbit	r3, r3
 8002a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a5c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a64:	2320      	movs	r3, #32
 8002a66:	e003      	b.n	8002a70 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	3301      	adds	r3, #1
 8002a72:	069b      	lsls	r3, r3, #26
 8002a74:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x520>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	f003 031f 	and.w	r3, r3, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	e017      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x550>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002aa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	ea42 0103 	orr.w	r1, r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x576>
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	0e9b      	lsrs	r3, r3, #26
 8002ade:	3301      	adds	r3, #1
 8002ae0:	f003 021f 	and.w	r2, r3, #31
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	051b      	lsls	r3, r3, #20
 8002aec:	e018      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x5a8>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 021f 	and.w	r2, r3, #31
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b20:	430b      	orrs	r3, r1
 8002b22:	e07e      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x5c8>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	0e9b      	lsrs	r3, r3, #26
 8002b36:	3301      	adds	r3, #1
 8002b38:	069b      	lsls	r3, r3, #26
 8002b3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3e:	e015      	b.n	8002b6c <HAL_ADC_ConfigChannel+0x5f4>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b50:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d101      	bne.n	8002b5c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b58:	2320      	movs	r3, #32
 8002b5a:	e003      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x614>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	0e9b      	lsrs	r3, r3, #26
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	2101      	movs	r1, #1
 8002b86:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8a:	e017      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x644>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	fa93 f3a3 	rbit	r3, r3
 8002b98:	61fb      	str	r3, [r7, #28]
  return result;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e003      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbc:	ea42 0103 	orr.w	r1, r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x670>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0e9b      	lsrs	r3, r3, #26
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	3b1e      	subs	r3, #30
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002be6:	e01b      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x6a8>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	613b      	str	r3, [r7, #16]
  return result;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	f003 021f 	and.w	r2, r3, #31
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	3b1e      	subs	r3, #30
 8002c1a:	051b      	lsls	r3, r3, #20
 8002c1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c20:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff f8eb 	bl	8001e02 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b09      	ldr	r3, [pc, #36]	@ (8002c58 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80be 	beq.w	8002db6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c42:	d004      	beq.n	8002c4e <HAL_ADC_ConfigChannel+0x6d6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a04      	ldr	r2, [pc, #16]	@ (8002c5c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d10a      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x6ec>
 8002c4e:	4b04      	ldr	r3, [pc, #16]	@ (8002c60 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c50:	e009      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x6ee>
 8002c52:	bf00      	nop
 8002c54:	407f0000 	.word	0x407f0000
 8002c58:	80080000 	.word	0x80080000
 8002c5c:	50000100 	.word	0x50000100
 8002c60:	50000300 	.word	0x50000300
 8002c64:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe ffe0 	bl	8001c2c <LL_ADC_GetCommonPathInternalCh>
 8002c6c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a56      	ldr	r2, [pc, #344]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x858>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d004      	beq.n	8002c84 <HAL_ADC_ConfigChannel+0x70c>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a55      	ldr	r2, [pc, #340]	@ (8002dd4 <HAL_ADC_ConfigChannel+0x85c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d13a      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d134      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c98:	d005      	beq.n	8002ca6 <HAL_ADC_ConfigChannel+0x72e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a4e      	ldr	r2, [pc, #312]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x860>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	f040 8085 	bne.w	8002db0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_ConfigChannel+0x742>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a49      	ldr	r2, [pc, #292]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x746>
 8002cba:	4a49      	ldr	r2, [pc, #292]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002cbc:	e000      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x748>
 8002cbe:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002cc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f7fe ff9b 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd0:	4b44      	ldr	r3, [pc, #272]	@ (8002de4 <HAL_ADC_ConfigChannel+0x86c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	4a44      	ldr	r2, [pc, #272]	@ (8002de8 <HAL_ADC_ConfigChannel+0x870>)
 8002cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f9      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cf8:	e05a      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3b      	ldr	r2, [pc, #236]	@ (8002dec <HAL_ADC_ConfigChannel+0x874>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d125      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11f      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a31      	ldr	r2, [pc, #196]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d104      	bne.n	8002d24 <HAL_ADC_ConfigChannel+0x7ac>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a34      	ldr	r2, [pc, #208]	@ (8002df0 <HAL_ADC_ConfigChannel+0x878>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d047      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d2c:	d004      	beq.n	8002d38 <HAL_ADC_ConfigChannel+0x7c0>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2a      	ldr	r2, [pc, #168]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d101      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x7c4>
 8002d38:	4a29      	ldr	r2, [pc, #164]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002d3a:	e000      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x7c6>
 8002d3c:	4a23      	ldr	r2, [pc, #140]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7fe ff5c 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d4e:	e031      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a27      	ldr	r2, [pc, #156]	@ (8002df4 <HAL_ADC_ConfigChannel+0x87c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12d      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d127      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d022      	beq.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d78:	d004      	beq.n	8002d84 <HAL_ADC_ConfigChannel+0x80c>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_ADC_ConfigChannel+0x864>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x810>
 8002d84:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_ADC_ConfigChannel+0x868>)
 8002d86:	e000      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x812>
 8002d88:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_ADC_ConfigChannel+0x854>)
 8002d8a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d8e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f7fe ff36 	bl	8001c06 <LL_ADC_SetCommonPathInternalCh>
 8002d9a:	e00c      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f043 0220 	orr.w	r2, r3, #32
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002dae:	e002      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002db0:	bf00      	nop
 8002db2:	e000      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dbe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	37d8      	adds	r7, #216	@ 0xd8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	50000700 	.word	0x50000700
 8002dd0:	c3210000 	.word	0xc3210000
 8002dd4:	90c00010 	.word	0x90c00010
 8002dd8:	50000600 	.word	0x50000600
 8002ddc:	50000100 	.word	0x50000100
 8002de0:	50000300 	.word	0x50000300
 8002de4:	20000000 	.word	0x20000000
 8002de8:	053e2d63 	.word	0x053e2d63
 8002dec:	c7520000 	.word	0xc7520000
 8002df0:	50000500 	.word	0x50000500
 8002df4:	cb840000 	.word	0xcb840000

08002df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff f8b9 	bl	8001f80 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d176      	bne.n	8002f02 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f0c <ADC_Enable+0x114>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e26:	f043 0210 	orr.w	r2, r3, #16
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e062      	b.n	8002f04 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff f888 	bl	8001f58 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e50:	d004      	beq.n	8002e5c <ADC_Enable+0x64>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <ADC_Enable+0x118>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d101      	bne.n	8002e60 <ADC_Enable+0x68>
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <ADC_Enable+0x11c>)
 8002e5e:	e000      	b.n	8002e62 <ADC_Enable+0x6a>
 8002e60:	4b2d      	ldr	r3, [pc, #180]	@ (8002f18 <ADC_Enable+0x120>)
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fee2 	bl	8001c2c <LL_ADC_GetCommonPathInternalCh>
 8002e68:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d013      	beq.n	8002e9a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e72:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <ADC_Enable+0x124>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <ADC_Enable+0x128>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	099b      	lsrs	r3, r3, #6
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e8c:	e002      	b.n	8002e94 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	3b01      	subs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f9      	bne.n	8002e8e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e9a:	f7fe fe95 	bl	8001bc8 <HAL_GetTick>
 8002e9e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ea0:	e028      	b.n	8002ef4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff f86a 	bl	8001f80 <LL_ADC_IsEnabled>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f84e 	bl	8001f58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ebc:	f7fe fe84 	bl	8001bc8 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d914      	bls.n	8002ef4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d00d      	beq.n	8002ef4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002edc:	f043 0210 	orr.w	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d1cf      	bne.n	8002ea2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	8000003f 	.word	0x8000003f
 8002f10:	50000100 	.word	0x50000100
 8002f14:	50000300 	.word	0x50000300
 8002f18:	50000700 	.word	0x50000700
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	053e2d63 	.word	0x053e2d63

08002f24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f36:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d14b      	bne.n	8002fd6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d021      	beq.n	8002f9c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fe ff11 	bl	8001d84 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d032      	beq.n	8002fce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d12b      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11f      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f92:	f043 0201 	orr.w	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f9a:	e018      	b.n	8002fce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d111      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff fab4 	bl	800253c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002fd4:	e00e      	b.n	8002ff4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fda:	f003 0310 	and.w	r3, r3, #16
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff fabe 	bl	8002564 <HAL_ADC_ErrorCallback>
}
 8002fe8:	e004      	b.n	8002ff4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
}
 8002ff4:	bf00      	nop
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f7ff faa0 	bl	8002550 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003010:	bf00      	nop
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003024:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003036:	f043 0204 	orr.w	r2, r3, #4
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fa90 	bl	8002564 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LL_ADC_IsEnabled>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <LL_ADC_IsEnabled+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_ADC_IsEnabled+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_ADC_REG_IsConversionOngoing>:
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d101      	bne.n	800308a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b0a1      	sub	sp, #132	@ 0x84
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d101      	bne.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030b2:	2302      	movs	r3, #2
 80030b4:	e0e7      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030be:	2300      	movs	r3, #0
 80030c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030c2:	2300      	movs	r3, #0
 80030c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ce:	d102      	bne.n	80030d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	e009      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a6e      	ldr	r2, [pc, #440]	@ (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d102      	bne.n	80030e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80030e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	e001      	b.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80030e6:	2300      	movs	r3, #0
 80030e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0be      	b.n	8003286 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff ffb1 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 8003110:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ffab 	bl	8003072 <LL_ADC_REG_IsConversionOngoing>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	f040 80a0 	bne.w	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 809c 	bne.w	8003264 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003134:	d004      	beq.n	8003140 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a55      	ldr	r2, [pc, #340]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d101      	bne.n	8003144 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003140:	4b56      	ldr	r3, [pc, #344]	@ (800329c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003142:	e000      	b.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003144:	4b56      	ldr	r3, [pc, #344]	@ (80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003146:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d04b      	beq.n	80031e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003150:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003162:	035b      	lsls	r3, r3, #13
 8003164:	430b      	orrs	r3, r1
 8003166:	431a      	orrs	r2, r3
 8003168:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800316a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003174:	d004      	beq.n	8003180 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a45      	ldr	r2, [pc, #276]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10f      	bne.n	80031a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003180:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003184:	f7ff ff62 	bl	800304c <LL_ADC_IsEnabled>
 8003188:	4604      	mov	r4, r0
 800318a:	4841      	ldr	r0, [pc, #260]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800318c:	f7ff ff5e 	bl	800304c <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	4323      	orrs	r3, r4
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf0c      	ite	eq
 8003198:	2301      	moveq	r3, #1
 800319a:	2300      	movne	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	e012      	b.n	80031c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80031a0:	483c      	ldr	r0, [pc, #240]	@ (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80031a2:	f7ff ff53 	bl	800304c <LL_ADC_IsEnabled>
 80031a6:	4604      	mov	r4, r0
 80031a8:	483b      	ldr	r0, [pc, #236]	@ (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80031aa:	f7ff ff4f 	bl	800304c <LL_ADC_IsEnabled>
 80031ae:	4603      	mov	r3, r0
 80031b0:	431c      	orrs	r4, r3
 80031b2:	483c      	ldr	r0, [pc, #240]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80031b4:	f7ff ff4a 	bl	800304c <LL_ADC_IsEnabled>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4323      	orrs	r3, r4
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d056      	beq.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80031ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80031d2:	f023 030f 	bic.w	r3, r3, #15
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	6811      	ldr	r1, [r2, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	6892      	ldr	r2, [r2, #8]
 80031de:	430a      	orrs	r2, r1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031e4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031e6:	e047      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031fc:	d004      	beq.n	8003208 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a23      	ldr	r2, [pc, #140]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10f      	bne.n	8003228 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003208:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800320c:	f7ff ff1e 	bl	800304c <LL_ADC_IsEnabled>
 8003210:	4604      	mov	r4, r0
 8003212:	481f      	ldr	r0, [pc, #124]	@ (8003290 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003214:	f7ff ff1a 	bl	800304c <LL_ADC_IsEnabled>
 8003218:	4603      	mov	r3, r0
 800321a:	4323      	orrs	r3, r4
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf0c      	ite	eq
 8003220:	2301      	moveq	r3, #1
 8003222:	2300      	movne	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	e012      	b.n	800324e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003228:	481a      	ldr	r0, [pc, #104]	@ (8003294 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800322a:	f7ff ff0f 	bl	800304c <LL_ADC_IsEnabled>
 800322e:	4604      	mov	r4, r0
 8003230:	4819      	ldr	r0, [pc, #100]	@ (8003298 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003232:	f7ff ff0b 	bl	800304c <LL_ADC_IsEnabled>
 8003236:	4603      	mov	r3, r0
 8003238:	431c      	orrs	r4, r3
 800323a:	481a      	ldr	r0, [pc, #104]	@ (80032a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800323c:	f7ff ff06 	bl	800304c <LL_ADC_IsEnabled>
 8003240:	4603      	mov	r3, r0
 8003242:	4323      	orrs	r3, r4
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003252:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800325a:	f023 030f 	bic.w	r3, r3, #15
 800325e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003260:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003262:	e009      	b.n	8003278 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003276:	e000      	b.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003282:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003286:	4618      	mov	r0, r3
 8003288:	3784      	adds	r7, #132	@ 0x84
 800328a:	46bd      	mov	sp, r7
 800328c:	bd90      	pop	{r4, r7, pc}
 800328e:	bf00      	nop
 8003290:	50000100 	.word	0x50000100
 8003294:	50000400 	.word	0x50000400
 8003298:	50000500 	.word	0x50000500
 800329c:	50000300 	.word	0x50000300
 80032a0:	50000700 	.word	0x50000700
 80032a4:	50000600 	.word	0x50000600

080032a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80032c4:	4013      	ands	r3, r2
 80032c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <__NVIC_SetPriorityGrouping+0x44>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00

080032f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f4:	4b04      	ldr	r3, [pc, #16]	@ (8003308 <__NVIC_GetPriorityGrouping+0x18>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 0307 	and.w	r3, r3, #7
}
 80032fe:	4618      	mov	r0, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	4603      	mov	r3, r0
 8003314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331a:	2b00      	cmp	r3, #0
 800331c:	db0b      	blt.n	8003336 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800331e:	79fb      	ldrb	r3, [r7, #7]
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4907      	ldr	r1, [pc, #28]	@ (8003344 <__NVIC_EnableIRQ+0x38>)
 8003326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332a:	095b      	lsrs	r3, r3, #5
 800332c:	2001      	movs	r0, #1
 800332e:	fa00 f202 	lsl.w	r2, r0, r2
 8003332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000e100 	.word	0xe000e100

08003348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	6039      	str	r1, [r7, #0]
 8003352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	db0a      	blt.n	8003372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	490c      	ldr	r1, [pc, #48]	@ (8003394 <__NVIC_SetPriority+0x4c>)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	0112      	lsls	r2, r2, #4
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	440b      	add	r3, r1
 800336c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003370:	e00a      	b.n	8003388 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <__NVIC_SetPriority+0x50>)
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	3b04      	subs	r3, #4
 8003380:	0112      	lsls	r2, r2, #4
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	440b      	add	r3, r1
 8003386:	761a      	strb	r2, [r3, #24]
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000e100 	.word	0xe000e100
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	@ 0x24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f1c3 0307 	rsb	r3, r3, #7
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	bf28      	it	cs
 80033ba:	2304      	movcs	r3, #4
 80033bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2b06      	cmp	r3, #6
 80033c4:	d902      	bls.n	80033cc <NVIC_EncodePriority+0x30>
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	3b03      	subs	r3, #3
 80033ca:	e000      	b.n	80033ce <NVIC_EncodePriority+0x32>
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43da      	mvns	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	401a      	ands	r2, r3
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e4:	f04f 31ff 	mov.w	r1, #4294967295
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	43d9      	mvns	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f4:	4313      	orrs	r3, r2
         );
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3b01      	subs	r3, #1
 8003410:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003414:	d301      	bcc.n	800341a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003416:	2301      	movs	r3, #1
 8003418:	e00f      	b.n	800343a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <SysTick_Config+0x40>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003422:	210f      	movs	r1, #15
 8003424:	f04f 30ff 	mov.w	r0, #4294967295
 8003428:	f7ff ff8e 	bl	8003348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800342c:	4b05      	ldr	r3, [pc, #20]	@ (8003444 <SysTick_Config+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003432:	4b04      	ldr	r3, [pc, #16]	@ (8003444 <SysTick_Config+0x40>)
 8003434:	2207      	movs	r2, #7
 8003436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3708      	adds	r7, #8
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000e010 	.word	0xe000e010

08003448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff ff29 	bl	80032a8 <__NVIC_SetPriorityGrouping>
}
 8003456:	bf00      	nop
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b086      	sub	sp, #24
 8003462:	af00      	add	r7, sp, #0
 8003464:	4603      	mov	r3, r0
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800346c:	f7ff ff40 	bl	80032f0 <__NVIC_GetPriorityGrouping>
 8003470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6978      	ldr	r0, [r7, #20]
 8003478:	f7ff ff90 	bl	800339c <NVIC_EncodePriority>
 800347c:	4602      	mov	r2, r0
 800347e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003482:	4611      	mov	r1, r2
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff ff5f 	bl	8003348 <__NVIC_SetPriority>
}
 800348a:	bf00      	nop
 800348c:	3718      	adds	r7, #24
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	4603      	mov	r3, r0
 800349a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff ff33 	bl	800330c <__NVIC_EnableIRQ>
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffa4 	bl	8003404 <SysTick_Config>
 80034bc:	4603      	mov	r3, r0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e08d      	b.n	80035f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	4b47      	ldr	r3, [pc, #284]	@ (8003600 <HAL_DMA_Init+0x138>)
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d80f      	bhi.n	8003506 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	461a      	mov	r2, r3
 80034ec:	4b45      	ldr	r3, [pc, #276]	@ (8003604 <HAL_DMA_Init+0x13c>)
 80034ee:	4413      	add	r3, r2
 80034f0:	4a45      	ldr	r2, [pc, #276]	@ (8003608 <HAL_DMA_Init+0x140>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	091b      	lsrs	r3, r3, #4
 80034f8:	009a      	lsls	r2, r3, #2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a42      	ldr	r2, [pc, #264]	@ (800360c <HAL_DMA_Init+0x144>)
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
 8003504:	e00e      	b.n	8003524 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	4b40      	ldr	r3, [pc, #256]	@ (8003610 <HAL_DMA_Init+0x148>)
 800350e:	4413      	add	r3, r2
 8003510:	4a3d      	ldr	r2, [pc, #244]	@ (8003608 <HAL_DMA_Init+0x140>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	009a      	lsls	r2, r3, #2
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a3c      	ldr	r2, [pc, #240]	@ (8003614 <HAL_DMA_Init+0x14c>)
 8003522:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa76 	bl	8003a68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003584:	d102      	bne.n	800358c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <HAL_DMA_Init+0x104>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d80c      	bhi.n	80035cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa96 	bl	8003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	e008      	b.n	80035de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40020407 	.word	0x40020407
 8003604:	bffdfff8 	.word	0xbffdfff8
 8003608:	cccccccd 	.word	0xcccccccd
 800360c:	40020000 	.word	0x40020000
 8003610:	bffdfbf8 	.word	0xbffdfbf8
 8003614:	40020400 	.word	0x40020400

08003618 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_DMA_Start_IT+0x20>
 8003634:	2302      	movs	r3, #2
 8003636:	e066      	b.n	8003706 <HAL_DMA_Start_IT+0xee>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d155      	bne.n	80036f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f9bb 	bl	80039ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 020e 	orr.w	r2, r2, #14
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e00f      	b.n	80036b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0204 	bic.w	r2, r2, #4
 800369e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 020a 	orr.w	r2, r2, #10
 80036ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e005      	b.n	8003704 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003700:	2302      	movs	r3, #2
 8003702:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003704:	7dfb      	ldrb	r3, [r7, #23]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d005      	beq.n	8003732 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2204      	movs	r2, #4
 800372a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
 8003730:	e037      	b.n	80037a2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 020e 	bic.w	r2, r2, #14
 8003740:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003750:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003766:	f003 021f 	and.w	r2, r3, #31
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	2101      	movs	r1, #1
 8003770:	fa01 f202 	lsl.w	r2, r1, r2
 8003774:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800377e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00c      	beq.n	80037a2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003792:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003796:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037a0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d00d      	beq.n	80037f4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2204      	movs	r2, #4
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	e047      	b.n	8003884 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020e 	bic.w	r2, r2, #14
 8003802:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f022 0201 	bic.w	r2, r2, #1
 8003812:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	f003 021f 	and.w	r2, r3, #31
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003840:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003862:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
    }
  }
  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	f003 031f 	and.w	r3, r3, #31
 80038ae:	2204      	movs	r2, #4
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d026      	beq.n	8003908 <HAL_DMA_IRQHandler+0x7a>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d021      	beq.n	8003908 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d107      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0204 	bic.w	r2, r2, #4
 80038e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038e6:	f003 021f 	and.w	r2, r3, #31
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	2104      	movs	r1, #4
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d071      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003906:	e06c      	b.n	80039e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2202      	movs	r2, #2
 8003912:	409a      	lsls	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4013      	ands	r3, r2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d02e      	beq.n	800397a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d029      	beq.n	800397a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 020a 	bic.w	r2, r2, #10
 8003942:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003950:	f003 021f 	and.w	r2, r3, #31
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	2102      	movs	r1, #2
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	2b00      	cmp	r3, #0
 800396e:	d038      	beq.n	80039e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003978:	e033      	b.n	80039e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	f003 031f 	and.w	r3, r3, #31
 8003982:	2208      	movs	r2, #8
 8003984:	409a      	lsls	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4013      	ands	r3, r2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02a      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d025      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 020e 	bic.w	r2, r2, #14
 80039a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ac:	f003 021f 	and.w	r2, r3, #31
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
}
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d004      	beq.n	8003a16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f003 021f 	and.w	r2, r3, #31
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	2101      	movs	r1, #1
 8003a24:	fa01 f202 	lsl.w	r2, r1, r2
 8003a28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b10      	cmp	r3, #16
 8003a38:	d108      	bne.n	8003a4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a4a:	e007      	b.n	8003a5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	60da      	str	r2, [r3, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b16      	ldr	r3, [pc, #88]	@ (8003ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d802      	bhi.n	8003a82 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003a7c:	4b15      	ldr	r3, [pc, #84]	@ (8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003a7e:	617b      	str	r3, [r7, #20]
 8003a80:	e001      	b.n	8003a86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003a82:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003a84:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3b08      	subs	r3, #8
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	009a      	lsls	r2, r3, #2
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2201      	movs	r2, #1
 8003abc:	409a      	lsls	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ac2:	bf00      	nop
 8003ac4:	371c      	adds	r7, #28
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40020407 	.word	0x40020407
 8003ad4:	40020800 	.word	0x40020800
 8003ad8:	40020820 	.word	0x40020820
 8003adc:	cccccccd 	.word	0xcccccccd
 8003ae0:	40020880 	.word	0x40020880

08003ae4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	461a      	mov	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a08      	ldr	r2, [pc, #32]	@ (8003b28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b06:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	2201      	movs	r2, #1
 8003b12:	409a      	lsls	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	1000823f 	.word	0x1000823f
 8003b28:	40020940 	.word	0x40020940

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b3a:	e15a      	b.n	8003df2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	2101      	movs	r1, #1
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	fa01 f303 	lsl.w	r3, r1, r3
 8003b48:	4013      	ands	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 814c 	beq.w	8003dec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d005      	beq.n	8003b6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d130      	bne.n	8003bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	2203      	movs	r2, #3
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	68da      	ldr	r2, [r3, #12]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	43db      	mvns	r3, r3
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0201 	and.w	r2, r3, #1
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	2b03      	cmp	r3, #3
 8003bd8:	d017      	beq.n	8003c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	2203      	movs	r2, #3
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43db      	mvns	r3, r3
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	689a      	ldr	r2, [r3, #8]
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d123      	bne.n	8003c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	220f      	movs	r2, #15
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	691a      	ldr	r2, [r3, #16]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	08da      	lsrs	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3208      	adds	r2, #8
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	005b      	lsls	r3, r3, #1
 8003c68:	2203      	movs	r2, #3
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	4013      	ands	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0203 	and.w	r2, r3, #3
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	fa02 f303 	lsl.w	r3, r2, r3
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80a6 	beq.w	8003dec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ca0:	4b5b      	ldr	r3, [pc, #364]	@ (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca4:	4a5a      	ldr	r2, [pc, #360]	@ (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cac:	4b58      	ldr	r3, [pc, #352]	@ (8003e10 <HAL_GPIO_Init+0x2e4>)
 8003cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cb8:	4a56      	ldr	r2, [pc, #344]	@ (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	220f      	movs	r2, #15
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003ce2:	d01f      	beq.n	8003d24 <HAL_GPIO_Init+0x1f8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8003e18 <HAL_GPIO_Init+0x2ec>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d019      	beq.n	8003d20 <HAL_GPIO_Init+0x1f4>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a4b      	ldr	r2, [pc, #300]	@ (8003e1c <HAL_GPIO_Init+0x2f0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <HAL_GPIO_Init+0x1f0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a4a      	ldr	r2, [pc, #296]	@ (8003e20 <HAL_GPIO_Init+0x2f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00d      	beq.n	8003d18 <HAL_GPIO_Init+0x1ec>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a49      	ldr	r2, [pc, #292]	@ (8003e24 <HAL_GPIO_Init+0x2f8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d007      	beq.n	8003d14 <HAL_GPIO_Init+0x1e8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a48      	ldr	r2, [pc, #288]	@ (8003e28 <HAL_GPIO_Init+0x2fc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_GPIO_Init+0x1e4>
 8003d0c:	2305      	movs	r3, #5
 8003d0e:	e00a      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d10:	2306      	movs	r3, #6
 8003d12:	e008      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d14:	2304      	movs	r3, #4
 8003d16:	e006      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e004      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e002      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_GPIO_Init+0x1fa>
 8003d24:	2300      	movs	r3, #0
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	f002 0203 	and.w	r2, r2, #3
 8003d2c:	0092      	lsls	r2, r2, #2
 8003d2e:	4093      	lsls	r3, r2
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d36:	4937      	ldr	r1, [pc, #220]	@ (8003e14 <HAL_GPIO_Init+0x2e8>)
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	3302      	adds	r3, #2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d44:	4b39      	ldr	r3, [pc, #228]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d68:	4a30      	ldr	r2, [pc, #192]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	43db      	mvns	r3, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d92:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d98:	4b24      	ldr	r3, [pc, #144]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	43db      	mvns	r3, r3
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4013      	ands	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	43db      	mvns	r3, r3
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de6:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_GPIO_Init+0x300>)
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	3301      	adds	r3, #1
 8003df0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f47f ae9d 	bne.w	8003b3c <HAL_GPIO_Init+0x10>
  }
}
 8003e02:	bf00      	nop
 8003e04:	bf00      	nop
 8003e06:	371c      	adds	r7, #28
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40010000 	.word	0x40010000
 8003e18:	48000400 	.word	0x48000400
 8003e1c:	48000800 	.word	0x48000800
 8003e20:	48000c00 	.word	0x48000c00
 8003e24:	48001000 	.word	0x48001000
 8003e28:	48001400 	.word	0x48001400
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e001      	b.n	8003e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e7c:	e002      	b.n	8003e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e7e:	887a      	ldrh	r2, [r7, #2]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	4603      	mov	r3, r0
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e9a:	4b08      	ldr	r3, [pc, #32]	@ (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	88fb      	ldrh	r3, [r7, #6]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d006      	beq.n	8003eb4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ea6:	4a05      	ldr	r2, [pc, #20]	@ (8003ebc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ea8:	88fb      	ldrh	r3, [r7, #6]
 8003eaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 f806 	bl	8003ec0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003eb4:	bf00      	nop
 8003eb6:	3708      	adds	r7, #8
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40010400 	.word	0x40010400

08003ec0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d141      	bne.n	8003f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef2:	d131      	bne.n	8003f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ef4:	4b47      	ldr	r3, [pc, #284]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003efa:	4a46      	ldr	r2, [pc, #280]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f04:	4b43      	ldr	r3, [pc, #268]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f0c:	4a41      	ldr	r2, [pc, #260]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f14:	4b40      	ldr	r3, [pc, #256]	@ (8004018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2232      	movs	r2, #50	@ 0x32
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	@ (800401c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	0c9b      	lsrs	r3, r3, #18
 8003f26:	3301      	adds	r3, #1
 8003f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f2a:	e002      	b.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f32:	4b38      	ldr	r3, [pc, #224]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3e:	d102      	bne.n	8003f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f2      	bne.n	8003f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f46:	4b33      	ldr	r3, [pc, #204]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f52:	d158      	bne.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e057      	b.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f58:	4b2e      	ldr	r3, [pc, #184]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003f68:	e04d      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f70:	d141      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f72:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f7e:	d131      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f86:	4a23      	ldr	r2, [pc, #140]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8004018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2232      	movs	r2, #50	@ 0x32
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a1c      	ldr	r2, [pc, #112]	@ (800401c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	e002      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbe:	4b15      	ldr	r3, [pc, #84]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d102      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f2      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd2:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fde:	d112      	bne.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e011      	b.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fea:	4a0a      	ldr	r2, [pc, #40]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ff4:	e007      	b.n	8004006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ffe:	4a05      	ldr	r2, [pc, #20]	@ (8004014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004004:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	40007000 	.word	0x40007000
 8004018:	20000000 	.word	0x20000000
 800401c:	431bde83 	.word	0x431bde83

08004020 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004020:	b480      	push	{r7}
 8004022:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a04      	ldr	r2, [pc, #16]	@ (800403c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800402a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800402e:	6093      	str	r3, [r2, #8]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40007000 	.word	0x40007000

08004040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e2fe      	b.n	8004650 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d075      	beq.n	800414a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800405e:	4b97      	ldr	r3, [pc, #604]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004068:	4b94      	ldr	r3, [pc, #592]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0303 	and.w	r3, r3, #3
 8004070:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d102      	bne.n	800407e <HAL_RCC_OscConfig+0x3e>
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d002      	beq.n	8004084 <HAL_RCC_OscConfig+0x44>
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d10b      	bne.n	800409c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004084:	4b8d      	ldr	r3, [pc, #564]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05b      	beq.n	8004148 <HAL_RCC_OscConfig+0x108>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d157      	bne.n	8004148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e2d9      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a4:	d106      	bne.n	80040b4 <HAL_RCC_OscConfig+0x74>
 80040a6:	4b85      	ldr	r3, [pc, #532]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a84      	ldr	r2, [pc, #528]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e01d      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x98>
 80040be:	4b7f      	ldr	r3, [pc, #508]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7e      	ldr	r2, [pc, #504]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b7c      	ldr	r3, [pc, #496]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a7b      	ldr	r2, [pc, #492]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e00b      	b.n	80040f0 <HAL_RCC_OscConfig+0xb0>
 80040d8:	4b78      	ldr	r3, [pc, #480]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a77      	ldr	r2, [pc, #476]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b75      	ldr	r3, [pc, #468]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a74      	ldr	r2, [pc, #464]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80040ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f8:	f7fd fd66 	bl	8001bc8 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040fe:	e008      	b.n	8004112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd fd62 	bl	8001bc8 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d901      	bls.n	8004112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e29e      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004112:	4b6a      	ldr	r3, [pc, #424]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d0f0      	beq.n	8004100 <HAL_RCC_OscConfig+0xc0>
 800411e:	e014      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd fd52 	bl	8001bc8 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd fd4e 	bl	8001bc8 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	@ 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e28a      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413a:	4b60      	ldr	r3, [pc, #384]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0xe8>
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d075      	beq.n	8004242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004156:	4b59      	ldr	r3, [pc, #356]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 030c 	and.w	r3, r3, #12
 800415e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004160:	4b56      	ldr	r3, [pc, #344]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b0c      	cmp	r3, #12
 800416e:	d102      	bne.n	8004176 <HAL_RCC_OscConfig+0x136>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d002      	beq.n	800417c <HAL_RCC_OscConfig+0x13c>
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	2b04      	cmp	r3, #4
 800417a:	d11f      	bne.n	80041bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800417c:	4b4f      	ldr	r3, [pc, #316]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_OscConfig+0x154>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e25d      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004194:	4b49      	ldr	r3, [pc, #292]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	4946      	ldr	r1, [pc, #280]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041a8:	4b45      	ldr	r3, [pc, #276]	@ (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fd fcbf 	bl	8001b30 <HAL_InitTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d043      	beq.n	8004240 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e249      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d023      	beq.n	800420c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c4:	4b3d      	ldr	r3, [pc, #244]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a3c      	ldr	r2, [pc, #240]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d0:	f7fd fcfa 	bl	8001bc8 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d8:	f7fd fcf6 	bl	8001bc8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e232      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ea:	4b34      	ldr	r3, [pc, #208]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b31      	ldr	r3, [pc, #196]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	061b      	lsls	r3, r3, #24
 8004204:	492d      	ldr	r1, [pc, #180]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]
 800420a:	e01a      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420c:	4b2b      	ldr	r3, [pc, #172]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a2a      	ldr	r2, [pc, #168]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004212:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fcd6 	bl	8001bc8 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004220:	f7fd fcd2 	bl	8001bc8 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e20e      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004232:	4b22      	ldr	r3, [pc, #136]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f0      	bne.n	8004220 <HAL_RCC_OscConfig+0x1e0>
 800423e:	e000      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004240:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d041      	beq.n	80042d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d01c      	beq.n	8004290 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004256:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425c:	4a17      	ldr	r2, [pc, #92]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004266:	f7fd fcaf 	bl	8001bc8 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426e:	f7fd fcab 	bl	8001bc8 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e1e7      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004280:	4b0e      	ldr	r3, [pc, #56]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ef      	beq.n	800426e <HAL_RCC_OscConfig+0x22e>
 800428e:	e020      	b.n	80042d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004290:	4b0a      	ldr	r3, [pc, #40]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004292:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004296:	4a09      	ldr	r2, [pc, #36]	@ (80042bc <HAL_RCC_OscConfig+0x27c>)
 8004298:	f023 0301 	bic.w	r3, r3, #1
 800429c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fd fc92 	bl	8001bc8 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a6:	e00d      	b.n	80042c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a8:	f7fd fc8e 	bl	8001bc8 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d906      	bls.n	80042c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1ca      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042c4:	4b8c      	ldr	r3, [pc, #560]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80042c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ea      	bne.n	80042a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0304 	and.w	r3, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 80a6 	beq.w	800442c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e0:	2300      	movs	r3, #0
 80042e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042e4:	4b84      	ldr	r3, [pc, #528]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_RCC_OscConfig+0x2b4>
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x2b6>
 80042f4:	2300      	movs	r3, #0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b7f      	ldr	r3, [pc, #508]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	4a7e      	ldr	r2, [pc, #504]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004304:	6593      	str	r3, [r2, #88]	@ 0x58
 8004306:	4b7c      	ldr	r3, [pc, #496]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004316:	4b79      	ldr	r3, [pc, #484]	@ (80044fc <HAL_RCC_OscConfig+0x4bc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004322:	4b76      	ldr	r3, [pc, #472]	@ (80044fc <HAL_RCC_OscConfig+0x4bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a75      	ldr	r2, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x4bc>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fd fc4b 	bl	8001bc8 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fd fc47 	bl	8001bc8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e183      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004348:	4b6c      	ldr	r3, [pc, #432]	@ (80044fc <HAL_RCC_OscConfig+0x4bc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d108      	bne.n	800436e <HAL_RCC_OscConfig+0x32e>
 800435c:	4b66      	ldr	r3, [pc, #408]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004362:	4a65      	ldr	r2, [pc, #404]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004364:	f043 0301 	orr.w	r3, r3, #1
 8004368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800436c:	e024      	b.n	80043b8 <HAL_RCC_OscConfig+0x378>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b05      	cmp	r3, #5
 8004374:	d110      	bne.n	8004398 <HAL_RCC_OscConfig+0x358>
 8004376:	4b60      	ldr	r3, [pc, #384]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800437c:	4a5e      	ldr	r2, [pc, #376]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	f043 0304 	orr.w	r3, r3, #4
 8004382:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004386:	4b5c      	ldr	r3, [pc, #368]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800438c:	4a5a      	ldr	r2, [pc, #360]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004396:	e00f      	b.n	80043b8 <HAL_RCC_OscConfig+0x378>
 8004398:	4b57      	ldr	r3, [pc, #348]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800439e:	4a56      	ldr	r2, [pc, #344]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80043a8:	4b53      	ldr	r3, [pc, #332]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043ae:	4a52      	ldr	r2, [pc, #328]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d016      	beq.n	80043ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fd fc02 	bl	8001bc8 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c6:	e00a      	b.n	80043de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c8:	f7fd fbfe 	bl	8001bc8 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e138      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043de:	4b46      	ldr	r3, [pc, #280]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0ed      	beq.n	80043c8 <HAL_RCC_OscConfig+0x388>
 80043ec:	e015      	b.n	800441a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ee:	f7fd fbeb 	bl	8001bc8 <HAL_GetTick>
 80043f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043f4:	e00a      	b.n	800440c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f6:	f7fd fbe7 	bl	8001bc8 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004404:	4293      	cmp	r3, r2
 8004406:	d901      	bls.n	800440c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e121      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800440c:	4b3a      	ldr	r3, [pc, #232]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ed      	bne.n	80043f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800441a:	7ffb      	ldrb	r3, [r7, #31]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b35      	ldr	r3, [pc, #212]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	4a34      	ldr	r2, [pc, #208]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800442a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0320 	and.w	r3, r3, #32
 8004434:	2b00      	cmp	r3, #0
 8004436:	d03c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01c      	beq.n	800447a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004440:	4b2d      	ldr	r3, [pc, #180]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004446:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd fbba 	bl	8001bc8 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004458:	f7fd fbb6 	bl	8001bc8 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0f2      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800446a:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ef      	beq.n	8004458 <HAL_RCC_OscConfig+0x418>
 8004478:	e01b      	b.n	80044b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800447a:	4b1f      	ldr	r3, [pc, #124]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 800447c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004480:	4a1d      	ldr	r2, [pc, #116]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 8004482:	f023 0301 	bic.w	r3, r3, #1
 8004486:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800448a:	f7fd fb9d 	bl	8001bc8 <HAL_GetTick>
 800448e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004490:	e008      	b.n	80044a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004492:	f7fd fb99 	bl	8001bc8 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d901      	bls.n	80044a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e0d5      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80044a4:	4b14      	ldr	r3, [pc, #80]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80044a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1ef      	bne.n	8004492 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80c9 	beq.w	800464e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044bc:	4b0e      	ldr	r3, [pc, #56]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b0c      	cmp	r3, #12
 80044c6:	f000 8083 	beq.w	80045d0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d15e      	bne.n	8004590 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d2:	4b09      	ldr	r3, [pc, #36]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a08      	ldr	r2, [pc, #32]	@ (80044f8 <HAL_RCC_OscConfig+0x4b8>)
 80044d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044de:	f7fd fb73 	bl	8001bc8 <HAL_GetTick>
 80044e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e4:	e00c      	b.n	8004500 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e6:	f7fd fb6f 	bl	8001bc8 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d905      	bls.n	8004500 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e0ab      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004500:	4b55      	ldr	r3, [pc, #340]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ec      	bne.n	80044e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800450c:	4b52      	ldr	r3, [pc, #328]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	4b52      	ldr	r3, [pc, #328]	@ (800465c <HAL_RCC_OscConfig+0x61c>)
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6a11      	ldr	r1, [r2, #32]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800451c:	3a01      	subs	r2, #1
 800451e:	0112      	lsls	r2, r2, #4
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004526:	0212      	lsls	r2, r2, #8
 8004528:	4311      	orrs	r1, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800452e:	0852      	lsrs	r2, r2, #1
 8004530:	3a01      	subs	r2, #1
 8004532:	0552      	lsls	r2, r2, #21
 8004534:	4311      	orrs	r1, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800453a:	0852      	lsrs	r2, r2, #1
 800453c:	3a01      	subs	r2, #1
 800453e:	0652      	lsls	r2, r2, #25
 8004540:	4311      	orrs	r1, r2
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004546:	06d2      	lsls	r2, r2, #27
 8004548:	430a      	orrs	r2, r1
 800454a:	4943      	ldr	r1, [pc, #268]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 800454c:	4313      	orrs	r3, r2
 800454e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004550:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a40      	ldr	r2, [pc, #256]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800455c:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	4a3d      	ldr	r2, [pc, #244]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004562:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004566:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fd fb2e 	bl	8001bc8 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004570:	f7fd fb2a 	bl	8001bc8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e066      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004582:	4b35      	ldr	r3, [pc, #212]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x530>
 800458e:	e05e      	b.n	800464e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a30      	ldr	r2, [pc, #192]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 8004596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fb14 	bl	8001bc8 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a4:	f7fd fb10 	bl	8001bc8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04c      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045b6:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80045c2:	4b25      	ldr	r3, [pc, #148]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	4924      	ldr	r1, [pc, #144]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 80045c8:	4b25      	ldr	r3, [pc, #148]	@ (8004660 <HAL_RCC_OscConfig+0x620>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	60cb      	str	r3, [r1, #12]
 80045ce:	e03e      	b.n	800464e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e039      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80045dc:	4b1e      	ldr	r3, [pc, #120]	@ (8004658 <HAL_RCC_OscConfig+0x618>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f003 0203 	and.w	r2, r3, #3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d12c      	bne.n	800464a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	3b01      	subs	r3, #1
 80045fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	429a      	cmp	r2, r3
 8004600:	d123      	bne.n	800464a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800460e:	429a      	cmp	r2, r3
 8004610:	d11b      	bne.n	800464a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800461e:	429a      	cmp	r2, r3
 8004620:	d113      	bne.n	800464a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	3b01      	subs	r3, #1
 8004630:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004632:	429a      	cmp	r2, r3
 8004634:	d109      	bne.n	800464a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004640:	085b      	lsrs	r3, r3, #1
 8004642:	3b01      	subs	r3, #1
 8004644:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d001      	beq.n	800464e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3720      	adds	r7, #32
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	40021000 	.word	0x40021000
 800465c:	019f800c 	.word	0x019f800c
 8004660:	feeefffc 	.word	0xfeeefffc

08004664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e11e      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800467c:	4b91      	ldr	r3, [pc, #580]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d910      	bls.n	80046ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468a:	4b8e      	ldr	r3, [pc, #568]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 020f 	bic.w	r2, r3, #15
 8004692:	498c      	ldr	r1, [pc, #560]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	4313      	orrs	r3, r2
 8004698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469a:	4b8a      	ldr	r3, [pc, #552]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e106      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d073      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b03      	cmp	r3, #3
 80046be:	d129      	bne.n	8004714 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046c0:	4b81      	ldr	r3, [pc, #516]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0f4      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80046d0:	f000 f99e 	bl	8004a10 <RCC_GetSysClockFreqFromPLLSource>
 80046d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4a7c      	ldr	r2, [pc, #496]	@ (80048cc <HAL_RCC_ClockConfig+0x268>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d93f      	bls.n	800475e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046de:	4b7a      	ldr	r3, [pc, #488]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d009      	beq.n	80046fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d033      	beq.n	800475e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d12f      	bne.n	800475e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046fe:	4b72      	ldr	r3, [pc, #456]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004706:	4a70      	ldr	r2, [pc, #448]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	e024      	b.n	800475e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d107      	bne.n	800472c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800471c:	4b6a      	ldr	r3, [pc, #424]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d109      	bne.n	800473c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0c6      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800472c:	4b66      	ldr	r3, [pc, #408]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0be      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800473c:	f000 f8ce 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004740:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	4a61      	ldr	r2, [pc, #388]	@ (80048cc <HAL_RCC_ClockConfig+0x268>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d909      	bls.n	800475e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800474a:	4b5f      	ldr	r3, [pc, #380]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004752:	4a5d      	ldr	r2, [pc, #372]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004758:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800475a:	2380      	movs	r3, #128	@ 0x80
 800475c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800475e:	4b5a      	ldr	r3, [pc, #360]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f023 0203 	bic.w	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	4957      	ldr	r1, [pc, #348]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004770:	f7fd fa2a 	bl	8001bc8 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004776:	e00a      	b.n	800478e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004778:	f7fd fa26 	bl	8001bc8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e095      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	4b4e      	ldr	r3, [pc, #312]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 020c 	and.w	r2, r3, #12
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	429a      	cmp	r2, r3
 800479e:	d1eb      	bne.n	8004778 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d023      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b8:	4b43      	ldr	r3, [pc, #268]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a42      	ldr	r2, [pc, #264]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80047d0:	4b3d      	ldr	r3, [pc, #244]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80047d8:	4a3b      	ldr	r2, [pc, #236]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80047de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e0:	4b39      	ldr	r3, [pc, #228]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4936      	ldr	r1, [pc, #216]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
 80047f2:	e008      	b.n	8004806 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	2b80      	cmp	r3, #128	@ 0x80
 80047f8:	d105      	bne.n	8004806 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80047fa:	4b33      	ldr	r3, [pc, #204]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	4a32      	ldr	r2, [pc, #200]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004800:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004804:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004806:	4b2f      	ldr	r3, [pc, #188]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	683a      	ldr	r2, [r7, #0]
 8004810:	429a      	cmp	r2, r3
 8004812:	d21d      	bcs.n	8004850 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004814:	4b2b      	ldr	r3, [pc, #172]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f023 020f 	bic.w	r2, r3, #15
 800481c:	4929      	ldr	r1, [pc, #164]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	4313      	orrs	r3, r2
 8004822:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004824:	f7fd f9d0 	bl	8001bc8 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fd f9cc 	bl	8001bc8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e03b      	b.n	80048ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004842:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <HAL_RCC_ClockConfig+0x260>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	429a      	cmp	r2, r3
 800484e:	d1ed      	bne.n	800482c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800485c:	4b1a      	ldr	r3, [pc, #104]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4917      	ldr	r1, [pc, #92]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800487a:	4b13      	ldr	r3, [pc, #76]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	490f      	ldr	r1, [pc, #60]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 800488a:	4313      	orrs	r3, r2
 800488c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800488e:	f000 f825 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004892:	4602      	mov	r2, r0
 8004894:	4b0c      	ldr	r3, [pc, #48]	@ (80048c8 <HAL_RCC_ClockConfig+0x264>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	091b      	lsrs	r3, r3, #4
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	490c      	ldr	r1, [pc, #48]	@ (80048d0 <HAL_RCC_ClockConfig+0x26c>)
 80048a0:	5ccb      	ldrb	r3, [r1, r3]
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	4a0a      	ldr	r2, [pc, #40]	@ (80048d4 <HAL_RCC_ClockConfig+0x270>)
 80048ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80048ae:	4b0a      	ldr	r3, [pc, #40]	@ (80048d8 <HAL_RCC_ClockConfig+0x274>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fd f93c 	bl	8001b30 <HAL_InitTick>
 80048b8:	4603      	mov	r3, r0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40022000 	.word	0x40022000
 80048c8:	40021000 	.word	0x40021000
 80048cc:	04c4b400 	.word	0x04c4b400
 80048d0:	08007f7c 	.word	0x08007f7c
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000004 	.word	0x20000004

080048dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 030c 	and.w	r3, r3, #12
 80048ea:	2b04      	cmp	r3, #4
 80048ec:	d102      	bne.n	80048f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	e047      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048f4:	4b27      	ldr	r3, [pc, #156]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d102      	bne.n	8004906 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004900:	4b26      	ldr	r3, [pc, #152]	@ (800499c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e03e      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004906:	4b23      	ldr	r3, [pc, #140]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b0c      	cmp	r3, #12
 8004910:	d136      	bne.n	8004980 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004912:	4b20      	ldr	r3, [pc, #128]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0303 	and.w	r3, r3, #3
 800491a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800491c:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	3301      	adds	r3, #1
 8004928:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d10c      	bne.n	800494a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004930:	4a1a      	ldr	r2, [pc, #104]	@ (800499c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	4a16      	ldr	r2, [pc, #88]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 800493a:	68d2      	ldr	r2, [r2, #12]
 800493c:	0a12      	lsrs	r2, r2, #8
 800493e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	617b      	str	r3, [r7, #20]
      break;
 8004948:	e00c      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800494a:	4a13      	ldr	r2, [pc, #76]	@ (8004998 <HAL_RCC_GetSysClockFreq+0xbc>)
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004952:	4a10      	ldr	r2, [pc, #64]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004954:	68d2      	ldr	r2, [r2, #12]
 8004956:	0a12      	lsrs	r2, r2, #8
 8004958:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800495c:	fb02 f303 	mul.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]
      break;
 8004962:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004964:	4b0b      	ldr	r3, [pc, #44]	@ (8004994 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	0e5b      	lsrs	r3, r3, #25
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	3301      	adds	r3, #1
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	fbb2 f3f3 	udiv	r3, r2, r3
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e001      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004984:	693b      	ldr	r3, [r7, #16]
}
 8004986:	4618      	mov	r0, r3
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	00f42400 	.word	0x00f42400
 800499c:	016e3600 	.word	0x016e3600

080049a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	20000000 	.word	0x20000000

080049b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049bc:	f7ff fff0 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049c0:	4602      	mov	r2, r0
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	0a1b      	lsrs	r3, r3, #8
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	4904      	ldr	r1, [pc, #16]	@ (80049e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ce:	5ccb      	ldrb	r3, [r1, r3]
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	08007f8c 	.word	0x08007f8c

080049e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049e8:	f7ff ffda 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049ec:	4602      	mov	r2, r0
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	0adb      	lsrs	r3, r3, #11
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	4904      	ldr	r1, [pc, #16]	@ (8004a0c <HAL_RCC_GetPCLK2Freq+0x28>)
 80049fa:	5ccb      	ldrb	r3, [r1, r3]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08007f8c 	.word	0x08007f8c

08004a10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a16:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f003 0303 	and.w	r3, r3, #3
 8004a1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a20:	4b1b      	ldr	r3, [pc, #108]	@ (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	091b      	lsrs	r3, r3, #4
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d10c      	bne.n	8004a4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a34:	4a17      	ldr	r2, [pc, #92]	@ (8004a94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3c:	4a14      	ldr	r2, [pc, #80]	@ (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a3e:	68d2      	ldr	r2, [r2, #12]
 8004a40:	0a12      	lsrs	r2, r2, #8
 8004a42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	617b      	str	r3, [r7, #20]
    break;
 8004a4c:	e00c      	b.n	8004a68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a4e:	4a12      	ldr	r2, [pc, #72]	@ (8004a98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4a0e      	ldr	r2, [pc, #56]	@ (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a58:	68d2      	ldr	r2, [r2, #12]
 8004a5a:	0a12      	lsrs	r2, r2, #8
 8004a5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a60:	fb02 f303 	mul.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
    break;
 8004a66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0e5b      	lsrs	r3, r3, #25
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	3301      	adds	r3, #1
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004a82:	687b      	ldr	r3, [r7, #4]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	40021000 	.word	0x40021000
 8004a94:	016e3600 	.word	0x016e3600
 8004a98:	00f42400 	.word	0x00f42400

08004a9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8098 	beq.w	8004bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abe:	4b43      	ldr	r3, [pc, #268]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10d      	bne.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4b40      	ldr	r3, [pc, #256]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ace:	4a3f      	ldr	r2, [pc, #252]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a39      	ldr	r2, [pc, #228]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004af2:	f7fd f869 	bl	8001bc8 <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004af8:	e009      	b.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004afa:	f7fd f865 	bl	8001bc8 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d902      	bls.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	74fb      	strb	r3, [r7, #19]
        break;
 8004b0c:	e005      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b0e:	4b30      	ldr	r3, [pc, #192]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ef      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d159      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b20:	4b2a      	ldr	r3, [pc, #168]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d019      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b3c:	4b23      	ldr	r3, [pc, #140]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b48:	4b20      	ldr	r3, [pc, #128]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b58:	4b1c      	ldr	r3, [pc, #112]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b68:	4a18      	ldr	r2, [pc, #96]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7a:	f7fd f825 	bl	8001bc8 <HAL_GetTick>
 8004b7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b80:	e00b      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b82:	f7fd f821 	bl	8001bc8 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d902      	bls.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	74fb      	strb	r3, [r7, #19]
            break;
 8004b98:	e006      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d0ec      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bae:	4b07      	ldr	r3, [pc, #28]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bb4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	4903      	ldr	r1, [pc, #12]	@ (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bc6:	7cfb      	ldrb	r3, [r7, #19]
 8004bc8:	74bb      	strb	r3, [r7, #18]
 8004bca:	e005      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd8:	7c7b      	ldrb	r3, [r7, #17]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d105      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bde:	4ba7      	ldr	r3, [pc, #668]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004be2:	4aa6      	ldr	r2, [pc, #664]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004be4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004be8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf6:	4ba1      	ldr	r3, [pc, #644]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bfc:	f023 0203 	bic.w	r2, r3, #3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	499d      	ldr	r1, [pc, #628]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c18:	4b98      	ldr	r3, [pc, #608]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c1e:	f023 020c 	bic.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4995      	ldr	r1, [pc, #596]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c3a:	4b90      	ldr	r3, [pc, #576]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c40:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	498c      	ldr	r1, [pc, #560]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c5c:	4b87      	ldr	r3, [pc, #540]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	4984      	ldr	r1, [pc, #528]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	695b      	ldr	r3, [r3, #20]
 8004c8c:	497b      	ldr	r1, [pc, #492]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ca0:	4b76      	ldr	r3, [pc, #472]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	4973      	ldr	r1, [pc, #460]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
 8004cd0:	496a      	ldr	r1, [pc, #424]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ce4:	4b65      	ldr	r3, [pc, #404]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	4962      	ldr	r1, [pc, #392]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d06:	4b5d      	ldr	r3, [pc, #372]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	4959      	ldr	r1, [pc, #356]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d28:	4b54      	ldr	r3, [pc, #336]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d2e:	f023 0203 	bic.w	r2, r3, #3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	4951      	ldr	r1, [pc, #324]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d4a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	4948      	ldr	r1, [pc, #288]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d015      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d6c:	4b43      	ldr	r3, [pc, #268]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	4940      	ldr	r1, [pc, #256]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d8a:	d105      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4a3a      	ldr	r2, [pc, #232]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d96:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004da4:	4b35      	ldr	r3, [pc, #212]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db2:	4932      	ldr	r1, [pc, #200]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dbe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d015      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ddc:	4b27      	ldr	r3, [pc, #156]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	4924      	ldr	r1, [pc, #144]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d015      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e14:	4b19      	ldr	r3, [pc, #100]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e22:	4916      	ldr	r1, [pc, #88]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e32:	d105      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e34:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	4a10      	ldr	r2, [pc, #64]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d019      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	4908      	ldr	r1, [pc, #32]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e6a:	d109      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e6c:	4b03      	ldr	r3, [pc, #12]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4a02      	ldr	r2, [pc, #8]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e76:	60d3      	str	r3, [r2, #12]
 8004e78:	e002      	b.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d015      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e8c:	4b29      	ldr	r3, [pc, #164]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e92:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	4926      	ldr	r1, [pc, #152]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eaa:	d105      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004eac:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	4a20      	ldr	r2, [pc, #128]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d015      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed2:	4918      	ldr	r1, [pc, #96]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee2:	d105      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004ee4:	4b13      	ldr	r3, [pc, #76]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4a12      	ldr	r2, [pc, #72]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d015      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004efc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	490a      	ldr	r1, [pc, #40]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004f1a:	d105      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f1c:	4b05      	ldr	r3, [pc, #20]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	4a04      	ldr	r2, [pc, #16]	@ (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004f28:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e054      	b.n	8004ff4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d111      	bne.n	8004f7a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f001 fb04 	bl	800656c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a23      	ldr	r2, [pc, #140]	@ (8004ffc <HAL_TIM_Base_Init+0xc4>)
 8004f70:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	f000 fe4d 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	080013f1 	.word	0x080013f1

08005000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e054      	b.n	80050bc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d111      	bne.n	8005042 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f001 faa0 	bl	800656c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a23      	ldr	r2, [pc, #140]	@ (80050c4 <HAL_TIM_PWM_Init+0xc4>)
 8005038:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2202      	movs	r2, #2
 8005046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 fde9 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2201      	movs	r2, #1
 8005086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	080013a5 	.word	0x080013a5

080050c8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e04c      	b.n	8005176 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d111      	bne.n	800510c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f001 fa3b 	bl	800656c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d102      	bne.n	8005104 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1f      	ldr	r2, [pc, #124]	@ (8005180 <HAL_TIM_OnePulse_Init+0xb8>)
 8005102:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 fd84 	bl	8005c2c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0208 	bic.w	r2, r2, #8
 8005132:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08005185 	.word	0x08005185

08005184 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800518c:	bf00      	nop
 800518e:	370c      	adds	r7, #12
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0a2      	b.n	80052f2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d111      	bne.n	80051dc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f001 f9d3 	bl	800656c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d102      	bne.n	80051d4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a4a      	ldr	r2, [pc, #296]	@ (80052fc <HAL_TIM_Encoder_Init+0x164>)
 80051d2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	6812      	ldr	r2, [r2, #0]
 80051ee:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80051f2:	f023 0307 	bic.w	r3, r3, #7
 80051f6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fd12 	bl	8005c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005230:	f023 0303 	bic.w	r3, r3, #3
 8005234:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	021b      	lsls	r3, r3, #8
 8005240:	4313      	orrs	r3, r2
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800524e:	f023 030c 	bic.w	r3, r3, #12
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800525a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800525e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	021b      	lsls	r3, r3, #8
 800526a:	4313      	orrs	r3, r2
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	011a      	lsls	r2, r3, #4
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	4313      	orrs	r3, r2
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800528c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005294:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	4313      	orrs	r3, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	08001499 	.word	0x08001499

08005300 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005310:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005318:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005320:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005328:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d110      	bne.n	8005352 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d102      	bne.n	800533c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005336:	7b7b      	ldrb	r3, [r7, #13]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d001      	beq.n	8005340 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e069      	b.n	8005414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005350:	e031      	b.n	80053b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d110      	bne.n	800537a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005358:	7bbb      	ldrb	r3, [r7, #14]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d102      	bne.n	8005364 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800535e:	7b3b      	ldrb	r3, [r7, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d001      	beq.n	8005368 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e055      	b.n	8005414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005378:	e01d      	b.n	80053b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d108      	bne.n	8005392 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	7b7b      	ldrb	r3, [r7, #13]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d102      	bne.n	8005392 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800538c:	7b3b      	ldrb	r3, [r7, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d001      	beq.n	8005396 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e03e      	b.n	8005414 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2202      	movs	r2, #2
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2202      	movs	r2, #2
 80053a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2202      	movs	r2, #2
 80053aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_TIM_Encoder_Start+0xc4>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d008      	beq.n	80053d4 <HAL_TIM_Encoder_Start+0xd4>
 80053c2:	e00f      	b.n	80053e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2201      	movs	r2, #1
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 f8a7 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 80053d2:	e016      	b.n	8005402 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2201      	movs	r2, #1
 80053da:	2104      	movs	r1, #4
 80053dc:	4618      	mov	r0, r3
 80053de:	f001 f89f 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 80053e2:	e00e      	b.n	8005402 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2201      	movs	r2, #1
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f001 f897 	bl	8006520 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	2104      	movs	r1, #4
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 f890 	bl	8006520 <TIM_CCxChannelCmd>
      break;
 8005400:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d026      	beq.n	800548c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d021      	beq.n	800548c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	4798      	blx	r3
 8005470:	e009      	b.n	8005486 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b00      	cmp	r3, #0
 8005494:	d026      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b00      	cmp	r3, #0
 800549e:	d021      	beq.n	80054e4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f06f 0204 	mvn.w	r2, #4
 80054a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e009      	b.n	80054de <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d026      	beq.n	800553c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d021      	beq.n	800553c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0208 	mvn.w	r2, #8
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2204      	movs	r2, #4
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	4798      	blx	r3
 8005520:	e009      	b.n	8005536 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d026      	beq.n	8005594 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b00      	cmp	r3, #0
 800554e:	d021      	beq.n	8005594 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
 8005578:	e009      	b.n	800558e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00e      	beq.n	80055bc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d009      	beq.n	80055bc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f06f 0201 	mvn.w	r2, #1
 80055b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d104      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00e      	beq.n	8005616 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800560a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00e      	beq.n	800563e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00e      	beq.n	8005666 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0320 	and.w	r3, r3, #32
 800564e:	2b00      	cmp	r3, #0
 8005650:	d009      	beq.n	8005666 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f06f 0220 	mvn.w	r2, #32
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00e      	beq.n	800568e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d009      	beq.n	800568e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d009      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80056d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00e      	beq.n	8005706 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d009      	beq.n	8005706 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005706:	bf00      	nop
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
	...

08005710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800572a:	2302      	movs	r3, #2
 800572c:	e0ff      	b.n	800592e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b14      	cmp	r3, #20
 800573a:	f200 80f0 	bhi.w	800591e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800573e:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005744:	08005799 	.word	0x08005799
 8005748:	0800591f 	.word	0x0800591f
 800574c:	0800591f 	.word	0x0800591f
 8005750:	0800591f 	.word	0x0800591f
 8005754:	080057d9 	.word	0x080057d9
 8005758:	0800591f 	.word	0x0800591f
 800575c:	0800591f 	.word	0x0800591f
 8005760:	0800591f 	.word	0x0800591f
 8005764:	0800581b 	.word	0x0800581b
 8005768:	0800591f 	.word	0x0800591f
 800576c:	0800591f 	.word	0x0800591f
 8005770:	0800591f 	.word	0x0800591f
 8005774:	0800585b 	.word	0x0800585b
 8005778:	0800591f 	.word	0x0800591f
 800577c:	0800591f 	.word	0x0800591f
 8005780:	0800591f 	.word	0x0800591f
 8005784:	0800589d 	.word	0x0800589d
 8005788:	0800591f 	.word	0x0800591f
 800578c:	0800591f 	.word	0x0800591f
 8005790:	0800591f 	.word	0x0800591f
 8005794:	080058dd 	.word	0x080058dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 faf8 	bl	8005d94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699a      	ldr	r2, [r3, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0208 	orr.w	r2, r2, #8
 80057b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0204 	bic.w	r2, r2, #4
 80057c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6999      	ldr	r1, [r3, #24]
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	619a      	str	r2, [r3, #24]
      break;
 80057d6:	e0a5      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68b9      	ldr	r1, [r7, #8]
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fb72 	bl	8005ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6999      	ldr	r1, [r3, #24]
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	021a      	lsls	r2, r3, #8
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	619a      	str	r2, [r3, #24]
      break;
 8005818:	e084      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	4618      	mov	r0, r3
 8005822:	f000 fbe5 	bl	8005ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	69da      	ldr	r2, [r3, #28]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0208 	orr.w	r2, r2, #8
 8005834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0204 	bic.w	r2, r2, #4
 8005844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	69d9      	ldr	r1, [r3, #28]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	61da      	str	r2, [r3, #28]
      break;
 8005858:	e064      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68b9      	ldr	r1, [r7, #8]
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fc57 	bl	8006114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69da      	ldr	r2, [r3, #28]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69d9      	ldr	r1, [r3, #28]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	021a      	lsls	r2, r3, #8
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	61da      	str	r2, [r3, #28]
      break;
 800589a:	e043      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 fcca 	bl	800623c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0208 	orr.w	r2, r2, #8
 80058b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0204 	bic.w	r2, r2, #4
 80058c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	691a      	ldr	r2, [r3, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80058da:	e023      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fd14 	bl	8006310 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005906:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800591c:	e002      	b.n	8005924 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	75fb      	strb	r3, [r7, #23]
      break;
 8005922:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800592c:	7dfb      	ldrb	r3, [r7, #23]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop

08005938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIM_ConfigClockSource+0x1c>
 8005950:	2302      	movs	r3, #2
 8005952:	e0f6      	b.n	8005b42 <HAL_TIM_ConfigClockSource+0x20a>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005972:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800597e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6f      	ldr	r2, [pc, #444]	@ (8005b4c <HAL_TIM_ConfigClockSource+0x214>)
 800598e:	4293      	cmp	r3, r2
 8005990:	f000 80c1 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005994:	4a6d      	ldr	r2, [pc, #436]	@ (8005b4c <HAL_TIM_ConfigClockSource+0x214>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f200 80c6 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 800599c:	4a6c      	ldr	r2, [pc, #432]	@ (8005b50 <HAL_TIM_ConfigClockSource+0x218>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	f000 80b9 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059a4:	4a6a      	ldr	r2, [pc, #424]	@ (8005b50 <HAL_TIM_ConfigClockSource+0x218>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	f200 80be 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059ac:	4a69      	ldr	r2, [pc, #420]	@ (8005b54 <HAL_TIM_ConfigClockSource+0x21c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	f000 80b1 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059b4:	4a67      	ldr	r2, [pc, #412]	@ (8005b54 <HAL_TIM_ConfigClockSource+0x21c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	f200 80b6 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059bc:	4a66      	ldr	r2, [pc, #408]	@ (8005b58 <HAL_TIM_ConfigClockSource+0x220>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	f000 80a9 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059c4:	4a64      	ldr	r2, [pc, #400]	@ (8005b58 <HAL_TIM_ConfigClockSource+0x220>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	f200 80ae 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059cc:	4a63      	ldr	r2, [pc, #396]	@ (8005b5c <HAL_TIM_ConfigClockSource+0x224>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f000 80a1 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059d4:	4a61      	ldr	r2, [pc, #388]	@ (8005b5c <HAL_TIM_ConfigClockSource+0x224>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	f200 80a6 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059dc:	4a60      	ldr	r2, [pc, #384]	@ (8005b60 <HAL_TIM_ConfigClockSource+0x228>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	f000 8099 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059e4:	4a5e      	ldr	r2, [pc, #376]	@ (8005b60 <HAL_TIM_ConfigClockSource+0x228>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	f200 809e 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059f0:	f000 8091 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 80059f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80059f8:	f200 8096 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 80059fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a00:	f000 8089 	beq.w	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005a04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a08:	f200 808e 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a10:	d03e      	beq.n	8005a90 <HAL_TIM_ConfigClockSource+0x158>
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a16:	f200 8087 	bhi.w	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a1e:	f000 8086 	beq.w	8005b2e <HAL_TIM_ConfigClockSource+0x1f6>
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	d87f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a28:	2b70      	cmp	r3, #112	@ 0x70
 8005a2a:	d01a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x12a>
 8005a2c:	2b70      	cmp	r3, #112	@ 0x70
 8005a2e:	d87b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a30:	2b60      	cmp	r3, #96	@ 0x60
 8005a32:	d050      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0x19e>
 8005a34:	2b60      	cmp	r3, #96	@ 0x60
 8005a36:	d877      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a38:	2b50      	cmp	r3, #80	@ 0x50
 8005a3a:	d03c      	beq.n	8005ab6 <HAL_TIM_ConfigClockSource+0x17e>
 8005a3c:	2b50      	cmp	r3, #80	@ 0x50
 8005a3e:	d873      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a40:	2b40      	cmp	r3, #64	@ 0x40
 8005a42:	d058      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x1be>
 8005a44:	2b40      	cmp	r3, #64	@ 0x40
 8005a46:	d86f      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a48:	2b30      	cmp	r3, #48	@ 0x30
 8005a4a:	d064      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005a4c:	2b30      	cmp	r3, #48	@ 0x30
 8005a4e:	d86b      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a50:	2b20      	cmp	r3, #32
 8005a52:	d060      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005a54:	2b20      	cmp	r3, #32
 8005a56:	d867      	bhi.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d05c      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d05a      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x1de>
 8005a60:	e062      	b.n	8005b28 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a72:	f000 fd35 	bl	80064e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005a84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68ba      	ldr	r2, [r7, #8]
 8005a8c:	609a      	str	r2, [r3, #8]
      break;
 8005a8e:	e04f      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa0:	f000 fd1e 	bl	80064e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ab2:	609a      	str	r2, [r3, #8]
      break;
 8005ab4:	e03c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f000 fc90 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2150      	movs	r1, #80	@ 0x50
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fce9 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005ad4:	e02c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 fcaf 	bl	8006446 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2160      	movs	r1, #96	@ 0x60
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fcd9 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005af4:	e01c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fc70 	bl	80063e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2140      	movs	r1, #64	@ 0x40
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fcc9 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005b14:	e00c      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f000 fcc0 	bl	80064a6 <TIM_ITRx_SetConfig>
      break;
 8005b26:	e003      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b2c:	e000      	b.n	8005b30 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005b2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	00100070 	.word	0x00100070
 8005b50:	00100060 	.word	0x00100060
 8005b54:	00100050 	.word	0x00100050
 8005b58:	00100040 	.word	0x00100040
 8005b5c:	00100030 	.word	0x00100030
 8005b60:	00100020 	.word	0x00100020

08005b64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005d70 <TIM_Base_SetConfig+0x144>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d017      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4a:	d013      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a49      	ldr	r2, [pc, #292]	@ (8005d74 <TIM_Base_SetConfig+0x148>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d00f      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a48      	ldr	r2, [pc, #288]	@ (8005d78 <TIM_Base_SetConfig+0x14c>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a47      	ldr	r2, [pc, #284]	@ (8005d7c <TIM_Base_SetConfig+0x150>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d007      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a46      	ldr	r2, [pc, #280]	@ (8005d80 <TIM_Base_SetConfig+0x154>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d003      	beq.n	8005c74 <TIM_Base_SetConfig+0x48>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a45      	ldr	r2, [pc, #276]	@ (8005d84 <TIM_Base_SetConfig+0x158>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d108      	bne.n	8005c86 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a39      	ldr	r2, [pc, #228]	@ (8005d70 <TIM_Base_SetConfig+0x144>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d023      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c94:	d01f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a36      	ldr	r2, [pc, #216]	@ (8005d74 <TIM_Base_SetConfig+0x148>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d01b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a35      	ldr	r2, [pc, #212]	@ (8005d78 <TIM_Base_SetConfig+0x14c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d017      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a34      	ldr	r2, [pc, #208]	@ (8005d7c <TIM_Base_SetConfig+0x150>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d013      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a33      	ldr	r2, [pc, #204]	@ (8005d80 <TIM_Base_SetConfig+0x154>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00f      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <TIM_Base_SetConfig+0x15c>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a32      	ldr	r2, [pc, #200]	@ (8005d8c <TIM_Base_SetConfig+0x160>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a31      	ldr	r2, [pc, #196]	@ (8005d90 <TIM_Base_SetConfig+0x164>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0xaa>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <TIM_Base_SetConfig+0x158>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a18      	ldr	r2, [pc, #96]	@ (8005d70 <TIM_Base_SetConfig+0x144>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d013      	beq.n	8005d3c <TIM_Base_SetConfig+0x110>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a1a      	ldr	r2, [pc, #104]	@ (8005d80 <TIM_Base_SetConfig+0x154>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00f      	beq.n	8005d3c <TIM_Base_SetConfig+0x110>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d88 <TIM_Base_SetConfig+0x15c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00b      	beq.n	8005d3c <TIM_Base_SetConfig+0x110>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a19      	ldr	r2, [pc, #100]	@ (8005d8c <TIM_Base_SetConfig+0x160>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <TIM_Base_SetConfig+0x110>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a18      	ldr	r2, [pc, #96]	@ (8005d90 <TIM_Base_SetConfig+0x164>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_Base_SetConfig+0x110>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a13      	ldr	r2, [pc, #76]	@ (8005d84 <TIM_Base_SetConfig+0x158>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d103      	bne.n	8005d44 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d105      	bne.n	8005d62 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f023 0201 	bic.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]
  }
}
 8005d62:	bf00      	nop
 8005d64:	3714      	adds	r7, #20
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40013400 	.word	0x40013400
 8005d84:	40015000 	.word	0x40015000
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800

08005d94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	f023 0201 	bic.w	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0303 	bic.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 0302 	bic.w	r3, r3, #2
 8005de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a30      	ldr	r2, [pc, #192]	@ (8005eb0 <TIM_OC1_SetConfig+0x11c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_OC1_SetConfig+0x88>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb4 <TIM_OC1_SetConfig+0x120>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC1_SetConfig+0x88>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a2e      	ldr	r2, [pc, #184]	@ (8005eb8 <TIM_OC1_SetConfig+0x124>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC1_SetConfig+0x88>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a2d      	ldr	r2, [pc, #180]	@ (8005ebc <TIM_OC1_SetConfig+0x128>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC1_SetConfig+0x88>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec0 <TIM_OC1_SetConfig+0x12c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC1_SetConfig+0x88>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec4 <TIM_OC1_SetConfig+0x130>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d10c      	bne.n	8005e36 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f023 0308 	bic.w	r3, r3, #8
 8005e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0304 	bic.w	r3, r3, #4
 8005e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb0 <TIM_OC1_SetConfig+0x11c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_OC1_SetConfig+0xd2>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1c      	ldr	r2, [pc, #112]	@ (8005eb4 <TIM_OC1_SetConfig+0x120>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_OC1_SetConfig+0xd2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb8 <TIM_OC1_SetConfig+0x124>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_OC1_SetConfig+0xd2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <TIM_OC1_SetConfig+0x128>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_OC1_SetConfig+0xd2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a19      	ldr	r2, [pc, #100]	@ (8005ec0 <TIM_OC1_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_OC1_SetConfig+0xd2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a18      	ldr	r2, [pc, #96]	@ (8005ec4 <TIM_OC1_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d111      	bne.n	8005e8a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	621a      	str	r2, [r3, #32]
}
 8005ea4:	bf00      	nop
 8005ea6:	371c      	adds	r7, #28
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	40012c00 	.word	0x40012c00
 8005eb4:	40013400 	.word	0x40013400
 8005eb8:	40014000 	.word	0x40014000
 8005ebc:	40014400 	.word	0x40014400
 8005ec0:	40014800 	.word	0x40014800
 8005ec4:	40015000 	.word	0x40015000

08005ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b087      	sub	sp, #28
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	f023 0210 	bic.w	r2, r3, #16
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	021b      	lsls	r3, r3, #8
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0320 	bic.w	r3, r3, #32
 8005f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a2c      	ldr	r2, [pc, #176]	@ (8005fd8 <TIM_OC2_SetConfig+0x110>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d007      	beq.n	8005f3c <TIM_OC2_SetConfig+0x74>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8005fdc <TIM_OC2_SetConfig+0x114>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC2_SetConfig+0x74>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a2a      	ldr	r2, [pc, #168]	@ (8005fe0 <TIM_OC2_SetConfig+0x118>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d10d      	bne.n	8005f58 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <TIM_OC2_SetConfig+0x110>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d013      	beq.n	8005f88 <TIM_OC2_SetConfig+0xc0>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a1e      	ldr	r2, [pc, #120]	@ (8005fdc <TIM_OC2_SetConfig+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d00f      	beq.n	8005f88 <TIM_OC2_SetConfig+0xc0>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe4 <TIM_OC2_SetConfig+0x11c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d00b      	beq.n	8005f88 <TIM_OC2_SetConfig+0xc0>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a1d      	ldr	r2, [pc, #116]	@ (8005fe8 <TIM_OC2_SetConfig+0x120>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d007      	beq.n	8005f88 <TIM_OC2_SetConfig+0xc0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8005fec <TIM_OC2_SetConfig+0x124>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC2_SetConfig+0xc0>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a17      	ldr	r2, [pc, #92]	@ (8005fe0 <TIM_OC2_SetConfig+0x118>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d113      	bne.n	8005fb0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40012c00 	.word	0x40012c00
 8005fdc:	40013400 	.word	0x40013400
 8005fe0:	40015000 	.word	0x40015000
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800601e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800603c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	021b      	lsls	r3, r3, #8
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	4313      	orrs	r3, r2
 8006048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2b      	ldr	r2, [pc, #172]	@ (80060fc <TIM_OC3_SetConfig+0x10c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <TIM_OC3_SetConfig+0x72>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a2a      	ldr	r2, [pc, #168]	@ (8006100 <TIM_OC3_SetConfig+0x110>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d003      	beq.n	8006062 <TIM_OC3_SetConfig+0x72>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a29      	ldr	r2, [pc, #164]	@ (8006104 <TIM_OC3_SetConfig+0x114>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d10d      	bne.n	800607e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006068:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	021b      	lsls	r3, r3, #8
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800607c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a1e      	ldr	r2, [pc, #120]	@ (80060fc <TIM_OC3_SetConfig+0x10c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <TIM_OC3_SetConfig+0xbe>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1d      	ldr	r2, [pc, #116]	@ (8006100 <TIM_OC3_SetConfig+0x110>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00f      	beq.n	80060ae <TIM_OC3_SetConfig+0xbe>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1d      	ldr	r2, [pc, #116]	@ (8006108 <TIM_OC3_SetConfig+0x118>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_OC3_SetConfig+0xbe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1c      	ldr	r2, [pc, #112]	@ (800610c <TIM_OC3_SetConfig+0x11c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_OC3_SetConfig+0xbe>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006110 <TIM_OC3_SetConfig+0x120>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC3_SetConfig+0xbe>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <TIM_OC3_SetConfig+0x114>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d113      	bne.n	80060d6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40012c00 	.word	0x40012c00
 8006100:	40013400 	.word	0x40013400
 8006104:	40015000 	.word	0x40015000
 8006108:	40014000 	.word	0x40014000
 800610c:	40014400 	.word	0x40014400
 8006110:	40014800 	.word	0x40014800

08006114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800614e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	031b      	lsls	r3, r3, #12
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a2c      	ldr	r2, [pc, #176]	@ (8006224 <TIM_OC4_SetConfig+0x110>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_OC4_SetConfig+0x74>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a2b      	ldr	r2, [pc, #172]	@ (8006228 <TIM_OC4_SetConfig+0x114>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_OC4_SetConfig+0x74>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2a      	ldr	r2, [pc, #168]	@ (800622c <TIM_OC4_SetConfig+0x118>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800618e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	031b      	lsls	r3, r3, #12
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1f      	ldr	r2, [pc, #124]	@ (8006224 <TIM_OC4_SetConfig+0x110>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d013      	beq.n	80061d4 <TIM_OC4_SetConfig+0xc0>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006228 <TIM_OC4_SetConfig+0x114>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d00f      	beq.n	80061d4 <TIM_OC4_SetConfig+0xc0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006230 <TIM_OC4_SetConfig+0x11c>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d00b      	beq.n	80061d4 <TIM_OC4_SetConfig+0xc0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a1d      	ldr	r2, [pc, #116]	@ (8006234 <TIM_OC4_SetConfig+0x120>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d007      	beq.n	80061d4 <TIM_OC4_SetConfig+0xc0>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <TIM_OC4_SetConfig+0x124>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d003      	beq.n	80061d4 <TIM_OC4_SetConfig+0xc0>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a17      	ldr	r2, [pc, #92]	@ (800622c <TIM_OC4_SetConfig+0x118>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d113      	bne.n	80061fc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061da:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061e2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	019b      	lsls	r3, r3, #6
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	019b      	lsls	r3, r3, #6
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	621a      	str	r2, [r3, #32]
}
 8006216:	bf00      	nop
 8006218:	371c      	adds	r7, #28
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	40012c00 	.word	0x40012c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40015000 	.word	0x40015000
 8006230:	40014000 	.word	0x40014000
 8006234:	40014400 	.word	0x40014400
 8006238:	40014800 	.word	0x40014800

0800623c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a1b      	ldr	r3, [r3, #32]
 8006250:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800626a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a19      	ldr	r2, [pc, #100]	@ (80062f8 <TIM_OC5_SetConfig+0xbc>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d013      	beq.n	80062be <TIM_OC5_SetConfig+0x82>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a18      	ldr	r2, [pc, #96]	@ (80062fc <TIM_OC5_SetConfig+0xc0>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d00f      	beq.n	80062be <TIM_OC5_SetConfig+0x82>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a17      	ldr	r2, [pc, #92]	@ (8006300 <TIM_OC5_SetConfig+0xc4>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00b      	beq.n	80062be <TIM_OC5_SetConfig+0x82>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a16      	ldr	r2, [pc, #88]	@ (8006304 <TIM_OC5_SetConfig+0xc8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <TIM_OC5_SetConfig+0x82>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <TIM_OC5_SetConfig+0xcc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC5_SetConfig+0x82>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a14      	ldr	r2, [pc, #80]	@ (800630c <TIM_OC5_SetConfig+0xd0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d109      	bne.n	80062d2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	021b      	lsls	r3, r3, #8
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	621a      	str	r2, [r3, #32]
}
 80062ec:	bf00      	nop
 80062ee:	371c      	adds	r7, #28
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40013400 	.word	0x40013400
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	40015000 	.word	0x40015000

08006310 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800633e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006356:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	051b      	lsls	r3, r3, #20
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a1a      	ldr	r2, [pc, #104]	@ (80063d0 <TIM_OC6_SetConfig+0xc0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d013      	beq.n	8006394 <TIM_OC6_SetConfig+0x84>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a19      	ldr	r2, [pc, #100]	@ (80063d4 <TIM_OC6_SetConfig+0xc4>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00f      	beq.n	8006394 <TIM_OC6_SetConfig+0x84>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a18      	ldr	r2, [pc, #96]	@ (80063d8 <TIM_OC6_SetConfig+0xc8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00b      	beq.n	8006394 <TIM_OC6_SetConfig+0x84>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a17      	ldr	r2, [pc, #92]	@ (80063dc <TIM_OC6_SetConfig+0xcc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_OC6_SetConfig+0x84>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a16      	ldr	r2, [pc, #88]	@ (80063e0 <TIM_OC6_SetConfig+0xd0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC6_SetConfig+0x84>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a15      	ldr	r2, [pc, #84]	@ (80063e4 <TIM_OC6_SetConfig+0xd4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d109      	bne.n	80063a8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800639a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	029b      	lsls	r3, r3, #10
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	621a      	str	r2, [r3, #32]
}
 80063c2:	bf00      	nop
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	40012c00 	.word	0x40012c00
 80063d4:	40013400 	.word	0x40013400
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40014400 	.word	0x40014400
 80063e0:	40014800 	.word	0x40014800
 80063e4:	40015000 	.word	0x40015000

080063e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0201 	bic.w	r2, r3, #1
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 030a 	bic.w	r3, r3, #10
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4313      	orrs	r3, r2
 800642c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	693a      	ldr	r2, [r7, #16]
 8006432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	621a      	str	r2, [r3, #32]
}
 800643a:	bf00      	nop
 800643c:	371c      	adds	r7, #28
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006446:	b480      	push	{r7}
 8006448:	b087      	sub	sp, #28
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	f023 0210 	bic.w	r2, r3, #16
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	031b      	lsls	r3, r3, #12
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b085      	sub	sp, #20
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80064bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	f043 0307 	orr.w	r3, r3, #7
 80064cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	609a      	str	r2, [r3, #8]
}
 80064d4:	bf00      	nop
 80064d6:	3714      	adds	r7, #20
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b087      	sub	sp, #28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	021a      	lsls	r2, r3, #8
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	431a      	orrs	r2, r3
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	4313      	orrs	r3, r2
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	2201      	movs	r2, #1
 8006534:	fa02 f303 	lsl.w	r3, r2, r3
 8006538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6a1a      	ldr	r2, [r3, #32]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	43db      	mvns	r3, r3
 8006542:	401a      	ands	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	f003 031f 	and.w	r3, r3, #31
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	fa01 f303 	lsl.w	r3, r1, r3
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a26      	ldr	r2, [pc, #152]	@ (8006610 <TIM_ResetCallback+0xa4>)
 8006578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a25      	ldr	r2, [pc, #148]	@ (8006614 <TIM_ResetCallback+0xa8>)
 8006580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	4a24      	ldr	r2, [pc, #144]	@ (8006618 <TIM_ResetCallback+0xac>)
 8006588:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a23      	ldr	r2, [pc, #140]	@ (800661c <TIM_ResetCallback+0xb0>)
 8006590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a22      	ldr	r2, [pc, #136]	@ (8006620 <TIM_ResetCallback+0xb4>)
 8006598:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a21      	ldr	r2, [pc, #132]	@ (8006624 <TIM_ResetCallback+0xb8>)
 80065a0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a20      	ldr	r2, [pc, #128]	@ (8006628 <TIM_ResetCallback+0xbc>)
 80065a8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a1f      	ldr	r2, [pc, #124]	@ (800662c <TIM_ResetCallback+0xc0>)
 80065b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006630 <TIM_ResetCallback+0xc4>)
 80065b8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1d      	ldr	r2, [pc, #116]	@ (8006634 <TIM_ResetCallback+0xc8>)
 80065c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a1c      	ldr	r2, [pc, #112]	@ (8006638 <TIM_ResetCallback+0xcc>)
 80065c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a1b      	ldr	r2, [pc, #108]	@ (800663c <TIM_ResetCallback+0xd0>)
 80065d0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a1a      	ldr	r2, [pc, #104]	@ (8006640 <TIM_ResetCallback+0xd4>)
 80065d8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <TIM_ResetCallback+0xd8>)
 80065e0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a18      	ldr	r2, [pc, #96]	@ (8006648 <TIM_ResetCallback+0xdc>)
 80065e8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a17      	ldr	r2, [pc, #92]	@ (800664c <TIM_ResetCallback+0xe0>)
 80065f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a16      	ldr	r2, [pc, #88]	@ (8006650 <TIM_ResetCallback+0xe4>)
 80065f8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a15      	ldr	r2, [pc, #84]	@ (8006654 <TIM_ResetCallback+0xe8>)
 8006600:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	08005b65 	.word	0x08005b65
 8006614:	08005b79 	.word	0x08005b79
 8006618:	08005bf1 	.word	0x08005bf1
 800661c:	08005c05 	.word	0x08005c05
 8006620:	08005ba1 	.word	0x08005ba1
 8006624:	08005bb5 	.word	0x08005bb5
 8006628:	08005b8d 	.word	0x08005b8d
 800662c:	08005bc9 	.word	0x08005bc9
 8006630:	08005bdd 	.word	0x08005bdd
 8006634:	08005c19 	.word	0x08005c19
 8006638:	080068ad 	.word	0x080068ad
 800663c:	080068c1 	.word	0x080068c1
 8006640:	080068d5 	.word	0x080068d5
 8006644:	080068e9 	.word	0x080068e9
 8006648:	080068fd 	.word	0x080068fd
 800664c:	08006911 	.word	0x08006911
 8006650:	08006925 	.word	0x08006925
 8006654:	08006939 	.word	0x08006939

08006658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800666c:	2302      	movs	r3, #2
 800666e:	e074      	b.n	800675a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2202      	movs	r2, #2
 800667c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a34      	ldr	r2, [pc, #208]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d009      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a33      	ldr	r2, [pc, #204]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d004      	beq.n	80066ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a31      	ldr	r2, [pc, #196]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d108      	bne.n	80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80066b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80066c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a21      	ldr	r2, [pc, #132]	@ (8006768 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d022      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f0:	d01d      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006774 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d018      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a1d      	ldr	r2, [pc, #116]	@ (8006778 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d013      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a1c      	ldr	r2, [pc, #112]	@ (800677c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d00e      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a15      	ldr	r2, [pc, #84]	@ (800676c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d009      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d004      	beq.n	800672e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a11      	ldr	r2, [pc, #68]	@ (8006770 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d10c      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006734:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4313      	orrs	r3, r2
 800673e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3714      	adds	r7, #20
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
 8006766:	bf00      	nop
 8006768:	40012c00 	.word	0x40012c00
 800676c:	40013400 	.word	0x40013400
 8006770:	40015000 	.word	0x40015000
 8006774:	40000400 	.word	0x40000400
 8006778:	40000800 	.word	0x40000800
 800677c:	40000c00 	.word	0x40000c00
 8006780:	40014000 	.word	0x40014000

08006784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800679c:	2302      	movs	r3, #2
 800679e:	e078      	b.n	8006892 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	041b      	lsls	r3, r3, #16
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	4313      	orrs	r3, r2
 8006826:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1c      	ldr	r2, [pc, #112]	@ (80068a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d009      	beq.n	8006846 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1b      	ldr	r2, [pc, #108]	@ (80068a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d004      	beq.n	8006846 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a19      	ldr	r2, [pc, #100]	@ (80068a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d11c      	bne.n	8006880 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	051b      	lsls	r3, r3, #20
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4313      	orrs	r3, r2
 800687e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40015000 	.word	0x40015000

080068ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006904:	bf00      	nop
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e050      	b.n	8006a00 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006964:	2b00      	cmp	r3, #0
 8006966:	d114      	bne.n	8006992 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 fbfb 	bl	800716c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d103      	bne.n	8006988 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a21      	ldr	r2, [pc, #132]	@ (8006a08 <HAL_UART_Init+0xbc>)
 8006984:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2224      	movs	r2, #36	@ 0x24
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 ff28 	bl	8007808 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fc29 	bl	8007210 <UART_SetConfig>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d101      	bne.n	80069c8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e01b      	b.n	8006a00 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	689a      	ldr	r2, [r3, #8]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 ffa7 	bl	800794c <UART_CheckIdleState>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	080017ed 	.word	0x080017ed

08006a0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b0ba      	sub	sp, #232	@ 0xe8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a36:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11b      	bne.n	8006a80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a4c:	f003 0320 	and.w	r3, r3, #32
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8312 	beq.w	800709a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
      }
      return;
 8006a7e:	e30c      	b.n	800709a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8129 	beq.w	8006cdc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006a8e:	4b90      	ldr	r3, [pc, #576]	@ (8006cd0 <HAL_UART_IRQHandler+0x2c4>)
 8006a90:	4013      	ands	r3, r2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d106      	bne.n	8006aa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006a9a:	4b8e      	ldr	r3, [pc, #568]	@ (8006cd4 <HAL_UART_IRQHandler+0x2c8>)
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 811c 	beq.w	8006cdc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xc8>
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aca:	f043 0201 	orr.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ad8:	f003 0302 	and.w	r3, r3, #2
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d011      	beq.n	8006b04 <HAL_UART_IRQHandler+0xf8>
 8006ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00b      	beq.n	8006b04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2202      	movs	r2, #2
 8006af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afa:	f043 0204 	orr.w	r2, r3, #4
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d011      	beq.n	8006b34 <HAL_UART_IRQHandler+0x128>
 8006b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00b      	beq.n	8006b34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2204      	movs	r2, #4
 8006b22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b2a:	f043 0202 	orr.w	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d017      	beq.n	8006b70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b44:	f003 0320 	and.w	r3, r3, #32
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006b50:	4b5f      	ldr	r3, [pc, #380]	@ (8006cd0 <HAL_UART_IRQHandler+0x2c4>)
 8006b52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00b      	beq.n	8006b70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b66:	f043 0208 	orr.w	r2, r3, #8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d012      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x196>
 8006b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b98:	f043 0220 	orr.w	r2, r3, #32
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8278 	beq.w	800709e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d013      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d007      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d003      	beq.n	8006be2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006be8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	d005      	beq.n	8006c06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006bfe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d058      	beq.n	8006cb8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 ffb7 	bl	8007b7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	d148      	bne.n	8006cac <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3308      	adds	r3, #8
 8006c20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3308      	adds	r3, #8
 8006c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c46:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1d9      	bne.n	8006c1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d017      	beq.n	8006ca0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c76:	4a18      	ldr	r2, [pc, #96]	@ (8006cd8 <HAL_UART_IRQHandler+0x2cc>)
 8006c78:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fc fd9d 	bl	80037c0 <HAL_DMA_Abort_IT>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01f      	beq.n	8006ccc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9e:	e015      	b.n	8006ccc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006caa:	e00f      	b.n	8006ccc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb6:	e009      	b.n	8006ccc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006cca:	e1e8      	b.n	800709e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ccc:	bf00      	nop
    return;
 8006cce:	e1e6      	b.n	800709e <HAL_UART_IRQHandler+0x692>
 8006cd0:	10000001 	.word	0x10000001
 8006cd4:	04000120 	.word	0x04000120
 8006cd8:	08007c47 	.word	0x08007c47

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 8176 	bne.w	8006fd2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 816f 	beq.w	8006fd2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cf8:	f003 0310 	and.w	r3, r3, #16
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 8168 	beq.w	8006fd2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2210      	movs	r2, #16
 8006d08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d14:	2b40      	cmp	r3, #64	@ 0x40
 8006d16:	f040 80dc 	bne.w	8006ed2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d28:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 80b1 	beq.w	8006e94 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d38:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	f080 80a9 	bcs.w	8006e94 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f040 8087 	bne.w	8006e6e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	461a      	mov	r2, r3
 8006d86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1da      	bne.n	8006d60 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3308      	adds	r3, #8
 8006db0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dbc:	f023 0301 	bic.w	r3, r3, #1
 8006dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3308      	adds	r3, #8
 8006dca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006dd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006dd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006de0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e1      	bne.n	8006daa <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	3308      	adds	r3, #8
 8006dec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006df0:	e853 3f00 	ldrex	r3, [r3]
 8006df4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006df6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3308      	adds	r3, #8
 8006e06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e3      	bne.n	8006de6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e34:	e853 3f00 	ldrex	r3, [r3]
 8006e38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e4      	bne.n	8006e2c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fc fc50 	bl	800370e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2202      	movs	r2, #2
 8006e72:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8006e86:	b292      	uxth	r2, r2
 8006e88:	1a8a      	subs	r2, r1, r2
 8006e8a:	b292      	uxth	r2, r2
 8006e8c:	4611      	mov	r1, r2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e92:	e106      	b.n	80070a2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	f040 80ff 	bne.w	80070a2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b20      	cmp	r3, #32
 8006eb4:	f040 80f5 	bne.w	80070a2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006eca:	4611      	mov	r1, r2
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	4798      	blx	r3
      return;
 8006ed0:	e0e7      	b.n	80070a2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 80d9 	beq.w	80070a6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8006ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 80d4 	beq.w	80070a6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f28:	e841 2300 	strex	r3, r2, [r1]
 8006f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1e4      	bne.n	8006efe <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	623b      	str	r3, [r7, #32]
   return(result);
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e1      	bne.n	8006f34 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0310 	bic.w	r3, r3, #16
 8006f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	69b9      	ldr	r1, [r7, #24]
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e4      	bne.n	8006f84 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006fc6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8006fca:	4611      	mov	r1, r2
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fd0:	e069      	b.n	80070a6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d010      	beq.n	8007000 <HAL_UART_IRQHandler+0x5f4>
 8006fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006ff2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ffe:	e055      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007008:	2b00      	cmp	r3, #0
 800700a:	d014      	beq.n	8007036 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800701c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d008      	beq.n	8007036 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007028:	2b00      	cmp	r3, #0
 800702a:	d03e      	beq.n	80070aa <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
    }
    return;
 8007034:	e039      	b.n	80070aa <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800703a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d009      	beq.n	8007056 <HAL_UART_IRQHandler+0x64a>
 8007042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fe0d 	bl	8007c6e <UART_EndTransmit_IT>
    return;
 8007054:	e02a      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800705a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <HAL_UART_IRQHandler+0x66e>
 8007062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007066:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d005      	beq.n	800707a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007078:	e018      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d012      	beq.n	80070ac <HAL_UART_IRQHandler+0x6a0>
 8007086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708a:	2b00      	cmp	r3, #0
 800708c:	da0e      	bge.n	80070ac <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007098:	e008      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
      return;
 800709a:	bf00      	nop
 800709c:	e006      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
    return;
 800709e:	bf00      	nop
 80070a0:	e004      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
      return;
 80070a2:	bf00      	nop
 80070a4:	e002      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
      return;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <HAL_UART_IRQHandler+0x6a0>
    return;
 80070aa:	bf00      	nop
  }
}
 80070ac:	37e8      	adds	r7, #232	@ 0xe8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b083      	sub	sp, #12
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80070f8:	bf00      	nop
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a1a      	ldr	r2, [pc, #104]	@ (80071e0 <UART_InitCallbacksToDefault+0x74>)
 8007178:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a19      	ldr	r2, [pc, #100]	@ (80071e4 <UART_InitCallbacksToDefault+0x78>)
 8007180:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a18      	ldr	r2, [pc, #96]	@ (80071e8 <UART_InitCallbacksToDefault+0x7c>)
 8007188:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a17      	ldr	r2, [pc, #92]	@ (80071ec <UART_InitCallbacksToDefault+0x80>)
 8007190:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	4a16      	ldr	r2, [pc, #88]	@ (80071f0 <UART_InitCallbacksToDefault+0x84>)
 8007198:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a15      	ldr	r2, [pc, #84]	@ (80071f4 <UART_InitCallbacksToDefault+0x88>)
 80071a0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a14      	ldr	r2, [pc, #80]	@ (80071f8 <UART_InitCallbacksToDefault+0x8c>)
 80071a8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <UART_InitCallbacksToDefault+0x90>)
 80071b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a12      	ldr	r2, [pc, #72]	@ (8007200 <UART_InitCallbacksToDefault+0x94>)
 80071b8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a11      	ldr	r2, [pc, #68]	@ (8007204 <UART_InitCallbacksToDefault+0x98>)
 80071c0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a10      	ldr	r2, [pc, #64]	@ (8007208 <UART_InitCallbacksToDefault+0x9c>)
 80071c8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a0f      	ldr	r2, [pc, #60]	@ (800720c <UART_InitCallbacksToDefault+0xa0>)
 80071d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	080070c9 	.word	0x080070c9
 80071e4:	080070b5 	.word	0x080070b5
 80071e8:	080070f1 	.word	0x080070f1
 80071ec:	080070dd 	.word	0x080070dd
 80071f0:	08007105 	.word	0x08007105
 80071f4:	08007119 	.word	0x08007119
 80071f8:	0800712d 	.word	0x0800712d
 80071fc:	08007141 	.word	0x08007141
 8007200:	08007cc9 	.word	0x08007cc9
 8007204:	08007cdd 	.word	0x08007cdd
 8007208:	08007cf1 	.word	0x08007cf1
 800720c:	08007155 	.word	0x08007155

08007210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007214:	b08c      	sub	sp, #48	@ 0x30
 8007216:	af00      	add	r7, sp, #0
 8007218:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	431a      	orrs	r2, r3
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	431a      	orrs	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	69db      	ldr	r3, [r3, #28]
 8007234:	4313      	orrs	r3, r2
 8007236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4baa      	ldr	r3, [pc, #680]	@ (80074e8 <UART_SetConfig+0x2d8>)
 8007240:	4013      	ands	r3, r2
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007248:	430b      	orrs	r3, r1
 800724a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a9f      	ldr	r2, [pc, #636]	@ (80074ec <UART_SetConfig+0x2dc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d004      	beq.n	800727c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007278:	4313      	orrs	r3, r2
 800727a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007286:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007290:	430b      	orrs	r3, r1
 8007292:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	f023 010f 	bic.w	r1, r3, #15
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a90      	ldr	r2, [pc, #576]	@ (80074f0 <UART_SetConfig+0x2e0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d125      	bne.n	8007300 <UART_SetConfig+0xf0>
 80072b4:	4b8f      	ldr	r3, [pc, #572]	@ (80074f4 <UART_SetConfig+0x2e4>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	2b03      	cmp	r3, #3
 80072c0:	d81a      	bhi.n	80072f8 <UART_SetConfig+0xe8>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <UART_SetConfig+0xb8>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	080072d9 	.word	0x080072d9
 80072cc:	080072e9 	.word	0x080072e9
 80072d0:	080072e1 	.word	0x080072e1
 80072d4:	080072f1 	.word	0x080072f1
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072de:	e116      	b.n	800750e <UART_SetConfig+0x2fe>
 80072e0:	2302      	movs	r3, #2
 80072e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072e6:	e112      	b.n	800750e <UART_SetConfig+0x2fe>
 80072e8:	2304      	movs	r3, #4
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072ee:	e10e      	b.n	800750e <UART_SetConfig+0x2fe>
 80072f0:	2308      	movs	r3, #8
 80072f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072f6:	e10a      	b.n	800750e <UART_SetConfig+0x2fe>
 80072f8:	2310      	movs	r3, #16
 80072fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80072fe:	e106      	b.n	800750e <UART_SetConfig+0x2fe>
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a7c      	ldr	r2, [pc, #496]	@ (80074f8 <UART_SetConfig+0x2e8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d138      	bne.n	800737c <UART_SetConfig+0x16c>
 800730a:	4b7a      	ldr	r3, [pc, #488]	@ (80074f4 <UART_SetConfig+0x2e4>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007310:	f003 030c 	and.w	r3, r3, #12
 8007314:	2b0c      	cmp	r3, #12
 8007316:	d82d      	bhi.n	8007374 <UART_SetConfig+0x164>
 8007318:	a201      	add	r2, pc, #4	@ (adr r2, 8007320 <UART_SetConfig+0x110>)
 800731a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731e:	bf00      	nop
 8007320:	08007355 	.word	0x08007355
 8007324:	08007375 	.word	0x08007375
 8007328:	08007375 	.word	0x08007375
 800732c:	08007375 	.word	0x08007375
 8007330:	08007365 	.word	0x08007365
 8007334:	08007375 	.word	0x08007375
 8007338:	08007375 	.word	0x08007375
 800733c:	08007375 	.word	0x08007375
 8007340:	0800735d 	.word	0x0800735d
 8007344:	08007375 	.word	0x08007375
 8007348:	08007375 	.word	0x08007375
 800734c:	08007375 	.word	0x08007375
 8007350:	0800736d 	.word	0x0800736d
 8007354:	2300      	movs	r3, #0
 8007356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800735a:	e0d8      	b.n	800750e <UART_SetConfig+0x2fe>
 800735c:	2302      	movs	r3, #2
 800735e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007362:	e0d4      	b.n	800750e <UART_SetConfig+0x2fe>
 8007364:	2304      	movs	r3, #4
 8007366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800736a:	e0d0      	b.n	800750e <UART_SetConfig+0x2fe>
 800736c:	2308      	movs	r3, #8
 800736e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007372:	e0cc      	b.n	800750e <UART_SetConfig+0x2fe>
 8007374:	2310      	movs	r3, #16
 8007376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800737a:	e0c8      	b.n	800750e <UART_SetConfig+0x2fe>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a5e      	ldr	r2, [pc, #376]	@ (80074fc <UART_SetConfig+0x2ec>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d125      	bne.n	80073d2 <UART_SetConfig+0x1c2>
 8007386:	4b5b      	ldr	r3, [pc, #364]	@ (80074f4 <UART_SetConfig+0x2e4>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007390:	2b30      	cmp	r3, #48	@ 0x30
 8007392:	d016      	beq.n	80073c2 <UART_SetConfig+0x1b2>
 8007394:	2b30      	cmp	r3, #48	@ 0x30
 8007396:	d818      	bhi.n	80073ca <UART_SetConfig+0x1ba>
 8007398:	2b20      	cmp	r3, #32
 800739a:	d00a      	beq.n	80073b2 <UART_SetConfig+0x1a2>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d814      	bhi.n	80073ca <UART_SetConfig+0x1ba>
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <UART_SetConfig+0x19a>
 80073a4:	2b10      	cmp	r3, #16
 80073a6:	d008      	beq.n	80073ba <UART_SetConfig+0x1aa>
 80073a8:	e00f      	b.n	80073ca <UART_SetConfig+0x1ba>
 80073aa:	2300      	movs	r3, #0
 80073ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b0:	e0ad      	b.n	800750e <UART_SetConfig+0x2fe>
 80073b2:	2302      	movs	r3, #2
 80073b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073b8:	e0a9      	b.n	800750e <UART_SetConfig+0x2fe>
 80073ba:	2304      	movs	r3, #4
 80073bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c0:	e0a5      	b.n	800750e <UART_SetConfig+0x2fe>
 80073c2:	2308      	movs	r3, #8
 80073c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073c8:	e0a1      	b.n	800750e <UART_SetConfig+0x2fe>
 80073ca:	2310      	movs	r3, #16
 80073cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80073d0:	e09d      	b.n	800750e <UART_SetConfig+0x2fe>
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a4a      	ldr	r2, [pc, #296]	@ (8007500 <UART_SetConfig+0x2f0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d125      	bne.n	8007428 <UART_SetConfig+0x218>
 80073dc:	4b45      	ldr	r3, [pc, #276]	@ (80074f4 <UART_SetConfig+0x2e4>)
 80073de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80073e8:	d016      	beq.n	8007418 <UART_SetConfig+0x208>
 80073ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80073ec:	d818      	bhi.n	8007420 <UART_SetConfig+0x210>
 80073ee:	2b80      	cmp	r3, #128	@ 0x80
 80073f0:	d00a      	beq.n	8007408 <UART_SetConfig+0x1f8>
 80073f2:	2b80      	cmp	r3, #128	@ 0x80
 80073f4:	d814      	bhi.n	8007420 <UART_SetConfig+0x210>
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <UART_SetConfig+0x1f0>
 80073fa:	2b40      	cmp	r3, #64	@ 0x40
 80073fc:	d008      	beq.n	8007410 <UART_SetConfig+0x200>
 80073fe:	e00f      	b.n	8007420 <UART_SetConfig+0x210>
 8007400:	2300      	movs	r3, #0
 8007402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007406:	e082      	b.n	800750e <UART_SetConfig+0x2fe>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800740e:	e07e      	b.n	800750e <UART_SetConfig+0x2fe>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007416:	e07a      	b.n	800750e <UART_SetConfig+0x2fe>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800741e:	e076      	b.n	800750e <UART_SetConfig+0x2fe>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007426:	e072      	b.n	800750e <UART_SetConfig+0x2fe>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a35      	ldr	r2, [pc, #212]	@ (8007504 <UART_SetConfig+0x2f4>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d12a      	bne.n	8007488 <UART_SetConfig+0x278>
 8007432:	4b30      	ldr	r3, [pc, #192]	@ (80074f4 <UART_SetConfig+0x2e4>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007438:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800743c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007440:	d01a      	beq.n	8007478 <UART_SetConfig+0x268>
 8007442:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007446:	d81b      	bhi.n	8007480 <UART_SetConfig+0x270>
 8007448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800744c:	d00c      	beq.n	8007468 <UART_SetConfig+0x258>
 800744e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007452:	d815      	bhi.n	8007480 <UART_SetConfig+0x270>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <UART_SetConfig+0x250>
 8007458:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800745c:	d008      	beq.n	8007470 <UART_SetConfig+0x260>
 800745e:	e00f      	b.n	8007480 <UART_SetConfig+0x270>
 8007460:	2300      	movs	r3, #0
 8007462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007466:	e052      	b.n	800750e <UART_SetConfig+0x2fe>
 8007468:	2302      	movs	r3, #2
 800746a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800746e:	e04e      	b.n	800750e <UART_SetConfig+0x2fe>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007476:	e04a      	b.n	800750e <UART_SetConfig+0x2fe>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800747e:	e046      	b.n	800750e <UART_SetConfig+0x2fe>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007486:	e042      	b.n	800750e <UART_SetConfig+0x2fe>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a17      	ldr	r2, [pc, #92]	@ (80074ec <UART_SetConfig+0x2dc>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d13a      	bne.n	8007508 <UART_SetConfig+0x2f8>
 8007492:	4b18      	ldr	r3, [pc, #96]	@ (80074f4 <UART_SetConfig+0x2e4>)
 8007494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007498:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800749c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a0:	d01a      	beq.n	80074d8 <UART_SetConfig+0x2c8>
 80074a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80074a6:	d81b      	bhi.n	80074e0 <UART_SetConfig+0x2d0>
 80074a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074ac:	d00c      	beq.n	80074c8 <UART_SetConfig+0x2b8>
 80074ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b2:	d815      	bhi.n	80074e0 <UART_SetConfig+0x2d0>
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <UART_SetConfig+0x2b0>
 80074b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074bc:	d008      	beq.n	80074d0 <UART_SetConfig+0x2c0>
 80074be:	e00f      	b.n	80074e0 <UART_SetConfig+0x2d0>
 80074c0:	2300      	movs	r3, #0
 80074c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074c6:	e022      	b.n	800750e <UART_SetConfig+0x2fe>
 80074c8:	2302      	movs	r3, #2
 80074ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074ce:	e01e      	b.n	800750e <UART_SetConfig+0x2fe>
 80074d0:	2304      	movs	r3, #4
 80074d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074d6:	e01a      	b.n	800750e <UART_SetConfig+0x2fe>
 80074d8:	2308      	movs	r3, #8
 80074da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074de:	e016      	b.n	800750e <UART_SetConfig+0x2fe>
 80074e0:	2310      	movs	r3, #16
 80074e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80074e6:	e012      	b.n	800750e <UART_SetConfig+0x2fe>
 80074e8:	cfff69f3 	.word	0xcfff69f3
 80074ec:	40008000 	.word	0x40008000
 80074f0:	40013800 	.word	0x40013800
 80074f4:	40021000 	.word	0x40021000
 80074f8:	40004400 	.word	0x40004400
 80074fc:	40004800 	.word	0x40004800
 8007500:	40004c00 	.word	0x40004c00
 8007504:	40005000 	.word	0x40005000
 8007508:	2310      	movs	r3, #16
 800750a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800750e:	697b      	ldr	r3, [r7, #20]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4aae      	ldr	r2, [pc, #696]	@ (80077cc <UART_SetConfig+0x5bc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	f040 8097 	bne.w	8007648 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800751a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800751e:	2b08      	cmp	r3, #8
 8007520:	d823      	bhi.n	800756a <UART_SetConfig+0x35a>
 8007522:	a201      	add	r2, pc, #4	@ (adr r2, 8007528 <UART_SetConfig+0x318>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	0800754d 	.word	0x0800754d
 800752c:	0800756b 	.word	0x0800756b
 8007530:	08007555 	.word	0x08007555
 8007534:	0800756b 	.word	0x0800756b
 8007538:	0800755b 	.word	0x0800755b
 800753c:	0800756b 	.word	0x0800756b
 8007540:	0800756b 	.word	0x0800756b
 8007544:	0800756b 	.word	0x0800756b
 8007548:	08007563 	.word	0x08007563
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800754c:	f7fd fa34 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8007550:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007552:	e010      	b.n	8007576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007554:	4b9e      	ldr	r3, [pc, #632]	@ (80077d0 <UART_SetConfig+0x5c0>)
 8007556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007558:	e00d      	b.n	8007576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800755a:	f7fd f9bf 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800755e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007560:	e009      	b.n	8007576 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007562:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007566:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007568:	e005      	b.n	8007576 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800756a:	2300      	movs	r3, #0
 800756c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007574:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	2b00      	cmp	r3, #0
 800757a:	f000 8130 	beq.w	80077de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007582:	4a94      	ldr	r2, [pc, #592]	@ (80077d4 <UART_SetConfig+0x5c4>)
 8007584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007588:	461a      	mov	r2, r3
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007590:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d305      	bcc.n	80075ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d903      	bls.n	80075b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80075b4:	e113      	b.n	80077de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	2200      	movs	r2, #0
 80075ba:	60bb      	str	r3, [r7, #8]
 80075bc:	60fa      	str	r2, [r7, #12]
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	4a84      	ldr	r2, [pc, #528]	@ (80077d4 <UART_SetConfig+0x5c4>)
 80075c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	2200      	movs	r2, #0
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80075d8:	f7f8 fe1e 	bl	8000218 <__aeabi_uldivmod>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4610      	mov	r0, r2
 80075e2:	4619      	mov	r1, r3
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	f04f 0300 	mov.w	r3, #0
 80075ec:	020b      	lsls	r3, r1, #8
 80075ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075f2:	0202      	lsls	r2, r0, #8
 80075f4:	6979      	ldr	r1, [r7, #20]
 80075f6:	6849      	ldr	r1, [r1, #4]
 80075f8:	0849      	lsrs	r1, r1, #1
 80075fa:	2000      	movs	r0, #0
 80075fc:	460c      	mov	r4, r1
 80075fe:	4605      	mov	r5, r0
 8007600:	eb12 0804 	adds.w	r8, r2, r4
 8007604:	eb43 0905 	adc.w	r9, r3, r5
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	469a      	mov	sl, r3
 8007610:	4693      	mov	fp, r2
 8007612:	4652      	mov	r2, sl
 8007614:	465b      	mov	r3, fp
 8007616:	4640      	mov	r0, r8
 8007618:	4649      	mov	r1, r9
 800761a:	f7f8 fdfd 	bl	8000218 <__aeabi_uldivmod>
 800761e:	4602      	mov	r2, r0
 8007620:	460b      	mov	r3, r1
 8007622:	4613      	mov	r3, r2
 8007624:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800762c:	d308      	bcc.n	8007640 <UART_SetConfig+0x430>
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007634:	d204      	bcs.n	8007640 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6a3a      	ldr	r2, [r7, #32]
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e0ce      	b.n	80077de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007646:	e0ca      	b.n	80077de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007650:	d166      	bne.n	8007720 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007652:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007656:	2b08      	cmp	r3, #8
 8007658:	d827      	bhi.n	80076aa <UART_SetConfig+0x49a>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <UART_SetConfig+0x450>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	08007685 	.word	0x08007685
 8007664:	0800768d 	.word	0x0800768d
 8007668:	08007695 	.word	0x08007695
 800766c:	080076ab 	.word	0x080076ab
 8007670:	0800769b 	.word	0x0800769b
 8007674:	080076ab 	.word	0x080076ab
 8007678:	080076ab 	.word	0x080076ab
 800767c:	080076ab 	.word	0x080076ab
 8007680:	080076a3 	.word	0x080076a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007684:	f7fd f998 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8007688:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800768a:	e014      	b.n	80076b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800768c:	f7fd f9aa 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 8007690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007692:	e010      	b.n	80076b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007694:	4b4e      	ldr	r3, [pc, #312]	@ (80077d0 <UART_SetConfig+0x5c0>)
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007698:	e00d      	b.n	80076b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800769a:	f7fd f91f 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800769e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80076a0:	e009      	b.n	80076b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80076a8:	e005      	b.n	80076b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80076b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80076b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8090 	beq.w	80077de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	4a44      	ldr	r2, [pc, #272]	@ (80077d4 <UART_SetConfig+0x5c4>)
 80076c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d0:	005a      	lsls	r2, r3, #1
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	085b      	lsrs	r3, r3, #1
 80076d8:	441a      	add	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d916      	bls.n	8007718 <UART_SetConfig+0x508>
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f0:	d212      	bcs.n	8007718 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076f2:	6a3b      	ldr	r3, [r7, #32]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f023 030f 	bic.w	r3, r3, #15
 80076fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	085b      	lsrs	r3, r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	f003 0307 	and.w	r3, r3, #7
 8007706:	b29a      	uxth	r2, r3
 8007708:	8bfb      	ldrh	r3, [r7, #30]
 800770a:	4313      	orrs	r3, r2
 800770c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	8bfa      	ldrh	r2, [r7, #30]
 8007714:	60da      	str	r2, [r3, #12]
 8007716:	e062      	b.n	80077de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800771e:	e05e      	b.n	80077de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007720:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007724:	2b08      	cmp	r3, #8
 8007726:	d828      	bhi.n	800777a <UART_SetConfig+0x56a>
 8007728:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0x520>)
 800772a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772e:	bf00      	nop
 8007730:	08007755 	.word	0x08007755
 8007734:	0800775d 	.word	0x0800775d
 8007738:	08007765 	.word	0x08007765
 800773c:	0800777b 	.word	0x0800777b
 8007740:	0800776b 	.word	0x0800776b
 8007744:	0800777b 	.word	0x0800777b
 8007748:	0800777b 	.word	0x0800777b
 800774c:	0800777b 	.word	0x0800777b
 8007750:	08007773 	.word	0x08007773
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007754:	f7fd f930 	bl	80049b8 <HAL_RCC_GetPCLK1Freq>
 8007758:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800775a:	e014      	b.n	8007786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800775c:	f7fd f942 	bl	80049e4 <HAL_RCC_GetPCLK2Freq>
 8007760:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007762:	e010      	b.n	8007786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007764:	4b1a      	ldr	r3, [pc, #104]	@ (80077d0 <UART_SetConfig+0x5c0>)
 8007766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007768:	e00d      	b.n	8007786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800776a:	f7fd f8b7 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800776e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007770:	e009      	b.n	8007786 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007776:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007778:	e005      	b.n	8007786 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007784:	bf00      	nop
    }

    if (pclk != 0U)
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	2b00      	cmp	r3, #0
 800778a:	d028      	beq.n	80077de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007790:	4a10      	ldr	r2, [pc, #64]	@ (80077d4 <UART_SetConfig+0x5c4>)
 8007792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007796:	461a      	mov	r2, r3
 8007798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779a:	fbb3 f2f2 	udiv	r2, r3, r2
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	441a      	add	r2, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077b0:	6a3b      	ldr	r3, [r7, #32]
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	d910      	bls.n	80077d8 <UART_SetConfig+0x5c8>
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077bc:	d20c      	bcs.n	80077d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60da      	str	r2, [r3, #12]
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x5ce>
 80077ca:	bf00      	nop
 80077cc:	40008000 	.word	0x40008000
 80077d0:	00f42400 	.word	0x00f42400
 80077d4:	08007f94 	.word	0x08007f94
      }
      else
      {
        ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2200      	movs	r2, #0
 80077f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2200      	movs	r2, #0
 80077f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80077fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3730      	adds	r7, #48	@ 0x30
 8007802:	46bd      	mov	sp, r7
 8007804:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	430a      	orrs	r2, r1
 8007852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	430a      	orrs	r2, r1
 8007874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800787a:	f003 0304 	and.w	r3, r3, #4
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	430a      	orrs	r2, r1
 8007896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800789c:	f003 0310 	and.w	r3, r3, #16
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	f003 0320 	and.w	r3, r3, #32
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	430a      	orrs	r2, r1
 80078da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d01a      	beq.n	800791e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007902:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007906:	d10a      	bne.n	800791e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b098      	sub	sp, #96	@ 0x60
 8007950:	af02      	add	r7, sp, #8
 8007952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800795c:	f7fa f934 	bl	8001bc8 <HAL_GetTick>
 8007960:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b08      	cmp	r3, #8
 800796e:	d12f      	bne.n	80079d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007970:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007978:	2200      	movs	r2, #0
 800797a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f88e 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d022      	beq.n	80079d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007992:	e853 3f00 	ldrex	r3, [r3]
 8007996:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800799a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800799e:	653b      	str	r3, [r7, #80]	@ 0x50
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80079ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80079b0:	e841 2300 	strex	r3, r2, [r1]
 80079b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80079b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1e6      	bne.n	800798a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2200      	movs	r2, #0
 80079c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079cc:	2303      	movs	r3, #3
 80079ce:	e063      	b.n	8007a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b04      	cmp	r3, #4
 80079dc:	d149      	bne.n	8007a72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80079e2:	9300      	str	r3, [sp, #0]
 80079e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079e6:	2200      	movs	r2, #0
 80079e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f857 	bl	8007aa0 <UART_WaitOnFlagUntilTimeout>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d03c      	beq.n	8007a72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	623b      	str	r3, [r7, #32]
   return(result);
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a16:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a18:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	3308      	adds	r3, #8
 8007a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3308      	adds	r3, #8
 8007a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a4a:	61fa      	str	r2, [r7, #28]
 8007a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	69b9      	ldr	r1, [r7, #24]
 8007a50:	69fa      	ldr	r2, [r7, #28]
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	617b      	str	r3, [r7, #20]
   return(result);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e5      	bne.n	8007a2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2220      	movs	r2, #32
 8007a62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e012      	b.n	8007a98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2220      	movs	r2, #32
 8007a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3758      	adds	r7, #88	@ 0x58
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	603b      	str	r3, [r7, #0]
 8007aac:	4613      	mov	r3, r2
 8007aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ab0:	e04f      	b.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab8:	d04b      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aba:	f7fa f885 	bl	8001bc8 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e04e      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d037      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b80      	cmp	r3, #128	@ 0x80
 8007ae6:	d034      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d031      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f003 0308 	and.w	r3, r3, #8
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d110      	bne.n	8007b1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2208      	movs	r2, #8
 8007b02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f838 	bl	8007b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e029      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b2c:	d111      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f81e 	bl	8007b7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e00f      	b.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69da      	ldr	r2, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	bf0c      	ite	eq
 8007b62:	2301      	moveq	r3, #1
 8007b64:	2300      	movne	r3, #0
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	461a      	mov	r2, r3
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d0a0      	beq.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b095      	sub	sp, #84	@ 0x54
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b8a:	e853 3f00 	ldrex	r3, [r3]
 8007b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ba0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ba2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ba6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ba8:	e841 2300 	strex	r3, r2, [r1]
 8007bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e6      	bne.n	8007b82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3308      	adds	r3, #8
 8007bba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	e853 3f00 	ldrex	r3, [r3]
 8007bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bca:	f023 0301 	bic.w	r3, r3, #1
 8007bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e3      	bne.n	8007bb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d118      	bne.n	8007c26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	e853 3f00 	ldrex	r3, [r3]
 8007c00:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	f023 0310 	bic.w	r3, r3, #16
 8007c08:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c12:	61bb      	str	r3, [r7, #24]
 8007c14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c16:	6979      	ldr	r1, [r7, #20]
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	e841 2300 	strex	r3, r2, [r1]
 8007c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1e6      	bne.n	8007bf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007c3a:	bf00      	nop
 8007c3c:	3754      	adds	r7, #84	@ 0x54
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c52:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c62:	68f8      	ldr	r0, [r7, #12]
 8007c64:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c66:	bf00      	nop
 8007c68:	3710      	adds	r7, #16
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	461a      	mov	r2, r3
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	61bb      	str	r3, [r7, #24]
 8007c96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6979      	ldr	r1, [r7, #20]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e6      	bne.n	8007c76 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2220      	movs	r2, #32
 8007cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc0:	bf00      	nop
 8007cc2:	3720      	adds	r7, #32
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_UARTEx_DisableFifoMode+0x16>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e027      	b.n	8007d6a <HAL_UARTEx_DisableFifoMode+0x66>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2224      	movs	r2, #36	@ 0x24
 8007d26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d101      	bne.n	8007d8e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e02d      	b.n	8007dea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2224      	movs	r2, #36	@ 0x24
 8007d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f850 	bl	8007e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007e06:	2302      	movs	r3, #2
 8007e08:	e02d      	b.n	8007e66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2224      	movs	r2, #36	@ 0x24
 8007e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0201 	bic.w	r2, r2, #1
 8007e30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f812 	bl	8007e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b085      	sub	sp, #20
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d108      	bne.n	8007e92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e90:	e031      	b.n	8007ef6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e92:	2308      	movs	r3, #8
 8007e94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e96:	2308      	movs	r3, #8
 8007e98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	0e5b      	lsrs	r3, r3, #25
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	f003 0307 	and.w	r3, r3, #7
 8007ea8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	0f5b      	lsrs	r3, r3, #29
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0307 	and.w	r3, r3, #7
 8007eb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007eba:	7bbb      	ldrb	r3, [r7, #14]
 8007ebc:	7b3a      	ldrb	r2, [r7, #12]
 8007ebe:	4911      	ldr	r1, [pc, #68]	@ (8007f04 <UARTEx_SetNbDataToProcess+0x94>)
 8007ec0:	5c8a      	ldrb	r2, [r1, r2]
 8007ec2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ec6:	7b3a      	ldrb	r2, [r7, #12]
 8007ec8:	490f      	ldr	r1, [pc, #60]	@ (8007f08 <UARTEx_SetNbDataToProcess+0x98>)
 8007eca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ed0:	b29a      	uxth	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	7b7a      	ldrb	r2, [r7, #13]
 8007edc:	4909      	ldr	r1, [pc, #36]	@ (8007f04 <UARTEx_SetNbDataToProcess+0x94>)
 8007ede:	5c8a      	ldrb	r2, [r1, r2]
 8007ee0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ee4:	7b7a      	ldrb	r2, [r7, #13]
 8007ee6:	4908      	ldr	r1, [pc, #32]	@ (8007f08 <UARTEx_SetNbDataToProcess+0x98>)
 8007ee8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007ef6:	bf00      	nop
 8007ef8:	3714      	adds	r7, #20
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop
 8007f04:	08007fac 	.word	0x08007fac
 8007f08:	08007fb4 	.word	0x08007fb4

08007f0c <memset>:
 8007f0c:	4402      	add	r2, r0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d100      	bne.n	8007f16 <memset+0xa>
 8007f14:	4770      	bx	lr
 8007f16:	f803 1b01 	strb.w	r1, [r3], #1
 8007f1a:	e7f9      	b.n	8007f10 <memset+0x4>

08007f1c <__libc_init_array>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8007f54 <__libc_init_array+0x38>)
 8007f20:	4c0d      	ldr	r4, [pc, #52]	@ (8007f58 <__libc_init_array+0x3c>)
 8007f22:	1b64      	subs	r4, r4, r5
 8007f24:	10a4      	asrs	r4, r4, #2
 8007f26:	2600      	movs	r6, #0
 8007f28:	42a6      	cmp	r6, r4
 8007f2a:	d109      	bne.n	8007f40 <__libc_init_array+0x24>
 8007f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8007f5c <__libc_init_array+0x40>)
 8007f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8007f60 <__libc_init_array+0x44>)
 8007f30:	f000 f818 	bl	8007f64 <_init>
 8007f34:	1b64      	subs	r4, r4, r5
 8007f36:	10a4      	asrs	r4, r4, #2
 8007f38:	2600      	movs	r6, #0
 8007f3a:	42a6      	cmp	r6, r4
 8007f3c:	d105      	bne.n	8007f4a <__libc_init_array+0x2e>
 8007f3e:	bd70      	pop	{r4, r5, r6, pc}
 8007f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f44:	4798      	blx	r3
 8007f46:	3601      	adds	r6, #1
 8007f48:	e7ee      	b.n	8007f28 <__libc_init_array+0xc>
 8007f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f4e:	4798      	blx	r3
 8007f50:	3601      	adds	r6, #1
 8007f52:	e7f2      	b.n	8007f3a <__libc_init_array+0x1e>
 8007f54:	08007fc4 	.word	0x08007fc4
 8007f58:	08007fc4 	.word	0x08007fc4
 8007f5c:	08007fc4 	.word	0x08007fc4
 8007f60:	08007fc8 	.word	0x08007fc8

08007f64 <_init>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	bf00      	nop
 8007f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6a:	bc08      	pop	{r3}
 8007f6c:	469e      	mov	lr, r3
 8007f6e:	4770      	bx	lr

08007f70 <_fini>:
 8007f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f72:	bf00      	nop
 8007f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f76:	bc08      	pop	{r3}
 8007f78:	469e      	mov	lr, r3
 8007f7a:	4770      	bx	lr
